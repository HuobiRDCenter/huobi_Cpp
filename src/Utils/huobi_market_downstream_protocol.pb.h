// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: huobi_market_downstream_protocol.proto

#ifndef PROTOBUF_INCLUDED_huobi_5fmarket_5fdownstream_5fprotocol_2eproto
#define PROTOBUF_INCLUDED_huobi_5fmarket_5fdownstream_5fprotocol_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_huobi_5fmarket_5fdownstream_5fprotocol_2eproto 

namespace protobuf_huobi_5fmarket_5fdownstream_5fprotocol_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[14];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_huobi_5fmarket_5fdownstream_5fprotocol_2eproto
namespace HuobiProto {
class AggrTrade;
class AggrTradeDefaultTypeInternal;
extern AggrTradeDefaultTypeInternal _AggrTrade_default_instance_;
class Candlestick;
class CandlestickDefaultTypeInternal;
extern CandlestickDefaultTypeInternal _Candlestick_default_instance_;
class Depth;
class DepthDefaultTypeInternal;
extern DepthDefaultTypeInternal _Depth_default_instance_;
class Depth_Tick;
class Depth_TickDefaultTypeInternal;
extern Depth_TickDefaultTypeInternal _Depth_Tick_default_instance_;
class MarketSummary;
class MarketSummaryDefaultTypeInternal;
extern MarketSummaryDefaultTypeInternal _MarketSummary_default_instance_;
class Overview;
class OverviewDefaultTypeInternal;
extern OverviewDefaultTypeInternal _Overview_default_instance_;
class Overview_Tick;
class Overview_TickDefaultTypeInternal;
extern Overview_TickDefaultTypeInternal _Overview_Tick_default_instance_;
class Ping;
class PingDefaultTypeInternal;
extern PingDefaultTypeInternal _Ping_default_instance_;
class ReqCandlestick;
class ReqCandlestickDefaultTypeInternal;
extern ReqCandlestickDefaultTypeInternal _ReqCandlestick_default_instance_;
class ReqCandlestick_Tick;
class ReqCandlestick_TickDefaultTypeInternal;
extern ReqCandlestick_TickDefaultTypeInternal _ReqCandlestick_Tick_default_instance_;
class ReqTrade;
class ReqTradeDefaultTypeInternal;
extern ReqTradeDefaultTypeInternal _ReqTrade_default_instance_;
class ReqTrade_Tick;
class ReqTrade_TickDefaultTypeInternal;
extern ReqTrade_TickDefaultTypeInternal _ReqTrade_Tick_default_instance_;
class Result;
class ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class Trade;
class TradeDefaultTypeInternal;
extern TradeDefaultTypeInternal _Trade_default_instance_;
}  // namespace HuobiProto
namespace google {
namespace protobuf {
template<> ::HuobiProto::AggrTrade* Arena::CreateMaybeMessage<::HuobiProto::AggrTrade>(Arena*);
template<> ::HuobiProto::Candlestick* Arena::CreateMaybeMessage<::HuobiProto::Candlestick>(Arena*);
template<> ::HuobiProto::Depth* Arena::CreateMaybeMessage<::HuobiProto::Depth>(Arena*);
template<> ::HuobiProto::Depth_Tick* Arena::CreateMaybeMessage<::HuobiProto::Depth_Tick>(Arena*);
template<> ::HuobiProto::MarketSummary* Arena::CreateMaybeMessage<::HuobiProto::MarketSummary>(Arena*);
template<> ::HuobiProto::Overview* Arena::CreateMaybeMessage<::HuobiProto::Overview>(Arena*);
template<> ::HuobiProto::Overview_Tick* Arena::CreateMaybeMessage<::HuobiProto::Overview_Tick>(Arena*);
template<> ::HuobiProto::Ping* Arena::CreateMaybeMessage<::HuobiProto::Ping>(Arena*);
template<> ::HuobiProto::ReqCandlestick* Arena::CreateMaybeMessage<::HuobiProto::ReqCandlestick>(Arena*);
template<> ::HuobiProto::ReqCandlestick_Tick* Arena::CreateMaybeMessage<::HuobiProto::ReqCandlestick_Tick>(Arena*);
template<> ::HuobiProto::ReqTrade* Arena::CreateMaybeMessage<::HuobiProto::ReqTrade>(Arena*);
template<> ::HuobiProto::ReqTrade_Tick* Arena::CreateMaybeMessage<::HuobiProto::ReqTrade_Tick>(Arena*);
template<> ::HuobiProto::Result* Arena::CreateMaybeMessage<::HuobiProto::Result>(Arena*);
template<> ::HuobiProto::Trade* Arena::CreateMaybeMessage<::HuobiProto::Trade>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace HuobiProto {

enum Depth_Step {
  Depth_Step_STEP0 = 0,
  Depth_Step_STEP1 = 1,
  Depth_Step_STEP2 = 2,
  Depth_Step_STEP3 = 3,
  Depth_Step_STEP4 = 4,
  Depth_Step_STEP5 = 5,
  Depth_Step_PERCENT10 = 6,
  Depth_Step_Depth_Step_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Depth_Step_Depth_Step_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Depth_Step_IsValid(int value);
const Depth_Step Depth_Step_Step_MIN = Depth_Step_STEP0;
const Depth_Step Depth_Step_Step_MAX = Depth_Step_PERCENT10;
const int Depth_Step_Step_ARRAYSIZE = Depth_Step_Step_MAX + 1;

const ::google::protobuf::EnumDescriptor* Depth_Step_descriptor();
inline const ::std::string& Depth_Step_Name(Depth_Step value) {
  return ::google::protobuf::internal::NameOfEnum(
    Depth_Step_descriptor(), value);
}
inline bool Depth_Step_Parse(
    const ::std::string& name, Depth_Step* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Depth_Step>(
    Depth_Step_descriptor(), name, value);
}
enum Interval {
  MIN_1 = 0,
  MIN_5 = 1,
  MIN_15 = 2,
  MIN_30 = 3,
  MIN_60 = 4,
  HOUR_4 = 5,
  DAY_1 = 6,
  WEEK_1 = 7,
  MON_1 = 8,
  YEAR_1 = 9,
  Interval_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Interval_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Interval_IsValid(int value);
const Interval Interval_MIN = MIN_1;
const Interval Interval_MAX = YEAR_1;
const int Interval_ARRAYSIZE = Interval_MAX + 1;

const ::google::protobuf::EnumDescriptor* Interval_descriptor();
inline const ::std::string& Interval_Name(Interval value) {
  return ::google::protobuf::internal::NameOfEnum(
    Interval_descriptor(), value);
}
inline bool Interval_Parse(
    const ::std::string& name, Interval* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Interval>(
    Interval_descriptor(), name, value);
}
enum Side {
  BUY = 0,
  SELL = 1,
  Side_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Side_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Side_IsValid(int value);
const Side Side_MIN = BUY;
const Side Side_MAX = SELL;
const int Side_ARRAYSIZE = Side_MAX + 1;

const ::google::protobuf::EnumDescriptor* Side_descriptor();
inline const ::std::string& Side_Name(Side value) {
  return ::google::protobuf::internal::NameOfEnum(
    Side_descriptor(), value);
}
inline bool Side_Parse(
    const ::std::string& name, Side* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Side>(
    Side_descriptor(), name, value);
}
enum Action {
  SUB = 0,
  REQ = 1,
  UNSUB = 2,
  PUSH = 3,
  PING = 4,
  PONG = 5,
  Action_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Action_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Action_IsValid(int value);
const Action Action_MIN = SUB;
const Action Action_MAX = PONG;
const int Action_ARRAYSIZE = Action_MAX + 1;

const ::google::protobuf::EnumDescriptor* Action_descriptor();
inline const ::std::string& Action_Name(Action value) {
  return ::google::protobuf::internal::NameOfEnum(
    Action_descriptor(), value);
}
inline bool Action_Parse(
    const ::std::string& name, Action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Action>(
    Action_descriptor(), name, value);
}
// ===================================================================

class Candlestick : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HuobiProto.Candlestick) */ {
 public:
  Candlestick();
  virtual ~Candlestick();

  Candlestick(const Candlestick& from);

  inline Candlestick& operator=(const Candlestick& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Candlestick(Candlestick&& from) noexcept
    : Candlestick() {
    *this = ::std::move(from);
  }

  inline Candlestick& operator=(Candlestick&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Candlestick& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Candlestick* internal_default_instance() {
    return reinterpret_cast<const Candlestick*>(
               &_Candlestick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Candlestick* other);
  friend void swap(Candlestick& a, Candlestick& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Candlestick* New() const final {
    return CreateMaybeMessage<Candlestick>(NULL);
  }

  Candlestick* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Candlestick>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Candlestick& from);
  void MergeFrom(const Candlestick& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Candlestick* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string open = 3;
  void clear_open();
  static const int kOpenFieldNumber = 3;
  const ::std::string& open() const;
  void set_open(const ::std::string& value);
  #if LANG_CXX11
  void set_open(::std::string&& value);
  #endif
  void set_open(const char* value);
  void set_open(const char* value, size_t size);
  ::std::string* mutable_open();
  ::std::string* release_open();
  void set_allocated_open(::std::string* open);

  // string close = 4;
  void clear_close();
  static const int kCloseFieldNumber = 4;
  const ::std::string& close() const;
  void set_close(const ::std::string& value);
  #if LANG_CXX11
  void set_close(::std::string&& value);
  #endif
  void set_close(const char* value);
  void set_close(const char* value, size_t size);
  ::std::string* mutable_close();
  ::std::string* release_close();
  void set_allocated_close(::std::string* close);

  // string low = 5;
  void clear_low();
  static const int kLowFieldNumber = 5;
  const ::std::string& low() const;
  void set_low(const ::std::string& value);
  #if LANG_CXX11
  void set_low(::std::string&& value);
  #endif
  void set_low(const char* value);
  void set_low(const char* value, size_t size);
  ::std::string* mutable_low();
  ::std::string* release_low();
  void set_allocated_low(::std::string* low);

  // string high = 6;
  void clear_high();
  static const int kHighFieldNumber = 6;
  const ::std::string& high() const;
  void set_high(const ::std::string& value);
  #if LANG_CXX11
  void set_high(::std::string&& value);
  #endif
  void set_high(const char* value);
  void set_high(const char* value, size_t size);
  ::std::string* mutable_high();
  ::std::string* release_high();
  void set_allocated_high(::std::string* high);

  // string turnover = 7;
  void clear_turnover();
  static const int kTurnoverFieldNumber = 7;
  const ::std::string& turnover() const;
  void set_turnover(const ::std::string& value);
  #if LANG_CXX11
  void set_turnover(::std::string&& value);
  #endif
  void set_turnover(const char* value);
  void set_turnover(const char* value, size_t size);
  ::std::string* mutable_turnover();
  ::std::string* release_turnover();
  void set_allocated_turnover(::std::string* turnover);

  // string volume = 8;
  void clear_volume();
  static const int kVolumeFieldNumber = 8;
  const ::std::string& volume() const;
  void set_volume(const ::std::string& value);
  #if LANG_CXX11
  void set_volume(::std::string&& value);
  #endif
  void set_volume(const char* value);
  void set_volume(const char* value, size_t size);
  ::std::string* mutable_volume();
  ::std::string* release_volume();
  void set_allocated_volume(::std::string* volume);

  // string symbol = 10;
  void clear_symbol();
  static const int kSymbolFieldNumber = 10;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // int64 ts = 1;
  void clear_ts();
  static const int kTsFieldNumber = 1;
  ::google::protobuf::int64 ts() const;
  void set_ts(::google::protobuf::int64 value);

  // int64 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // int32 num_of_trades = 9;
  void clear_num_of_trades();
  static const int kNumOfTradesFieldNumber = 9;
  ::google::protobuf::int32 num_of_trades() const;
  void set_num_of_trades(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:HuobiProto.Candlestick)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr open_;
  ::google::protobuf::internal::ArenaStringPtr close_;
  ::google::protobuf::internal::ArenaStringPtr low_;
  ::google::protobuf::internal::ArenaStringPtr high_;
  ::google::protobuf::internal::ArenaStringPtr turnover_;
  ::google::protobuf::internal::ArenaStringPtr volume_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::int64 ts_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 num_of_trades_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_huobi_5fmarket_5fdownstream_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReqCandlestick_Tick : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HuobiProto.ReqCandlestick.Tick) */ {
 public:
  ReqCandlestick_Tick();
  virtual ~ReqCandlestick_Tick();

  ReqCandlestick_Tick(const ReqCandlestick_Tick& from);

  inline ReqCandlestick_Tick& operator=(const ReqCandlestick_Tick& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqCandlestick_Tick(ReqCandlestick_Tick&& from) noexcept
    : ReqCandlestick_Tick() {
    *this = ::std::move(from);
  }

  inline ReqCandlestick_Tick& operator=(ReqCandlestick_Tick&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqCandlestick_Tick& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqCandlestick_Tick* internal_default_instance() {
    return reinterpret_cast<const ReqCandlestick_Tick*>(
               &_ReqCandlestick_Tick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ReqCandlestick_Tick* other);
  friend void swap(ReqCandlestick_Tick& a, ReqCandlestick_Tick& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqCandlestick_Tick* New() const final {
    return CreateMaybeMessage<ReqCandlestick_Tick>(NULL);
  }

  ReqCandlestick_Tick* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqCandlestick_Tick>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqCandlestick_Tick& from);
  void MergeFrom(const ReqCandlestick_Tick& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCandlestick_Tick* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string open = 3;
  void clear_open();
  static const int kOpenFieldNumber = 3;
  const ::std::string& open() const;
  void set_open(const ::std::string& value);
  #if LANG_CXX11
  void set_open(::std::string&& value);
  #endif
  void set_open(const char* value);
  void set_open(const char* value, size_t size);
  ::std::string* mutable_open();
  ::std::string* release_open();
  void set_allocated_open(::std::string* open);

  // string close = 4;
  void clear_close();
  static const int kCloseFieldNumber = 4;
  const ::std::string& close() const;
  void set_close(const ::std::string& value);
  #if LANG_CXX11
  void set_close(::std::string&& value);
  #endif
  void set_close(const char* value);
  void set_close(const char* value, size_t size);
  ::std::string* mutable_close();
  ::std::string* release_close();
  void set_allocated_close(::std::string* close);

  // string low = 5;
  void clear_low();
  static const int kLowFieldNumber = 5;
  const ::std::string& low() const;
  void set_low(const ::std::string& value);
  #if LANG_CXX11
  void set_low(::std::string&& value);
  #endif
  void set_low(const char* value);
  void set_low(const char* value, size_t size);
  ::std::string* mutable_low();
  ::std::string* release_low();
  void set_allocated_low(::std::string* low);

  // string high = 6;
  void clear_high();
  static const int kHighFieldNumber = 6;
  const ::std::string& high() const;
  void set_high(const ::std::string& value);
  #if LANG_CXX11
  void set_high(::std::string&& value);
  #endif
  void set_high(const char* value);
  void set_high(const char* value, size_t size);
  ::std::string* mutable_high();
  ::std::string* release_high();
  void set_allocated_high(::std::string* high);

  // string turnover = 7;
  void clear_turnover();
  static const int kTurnoverFieldNumber = 7;
  const ::std::string& turnover() const;
  void set_turnover(const ::std::string& value);
  #if LANG_CXX11
  void set_turnover(::std::string&& value);
  #endif
  void set_turnover(const char* value);
  void set_turnover(const char* value, size_t size);
  ::std::string* mutable_turnover();
  ::std::string* release_turnover();
  void set_allocated_turnover(::std::string* turnover);

  // string volume = 8;
  void clear_volume();
  static const int kVolumeFieldNumber = 8;
  const ::std::string& volume() const;
  void set_volume(const ::std::string& value);
  #if LANG_CXX11
  void set_volume(::std::string&& value);
  #endif
  void set_volume(const char* value);
  void set_volume(const char* value, size_t size);
  ::std::string* mutable_volume();
  ::std::string* release_volume();
  void set_allocated_volume(::std::string* volume);

  // int64 ts = 1;
  void clear_ts();
  static const int kTsFieldNumber = 1;
  ::google::protobuf::int64 ts() const;
  void set_ts(::google::protobuf::int64 value);

  // int64 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // int32 num_of_trades = 9;
  void clear_num_of_trades();
  static const int kNumOfTradesFieldNumber = 9;
  ::google::protobuf::int32 num_of_trades() const;
  void set_num_of_trades(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:HuobiProto.ReqCandlestick.Tick)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr open_;
  ::google::protobuf::internal::ArenaStringPtr close_;
  ::google::protobuf::internal::ArenaStringPtr low_;
  ::google::protobuf::internal::ArenaStringPtr high_;
  ::google::protobuf::internal::ArenaStringPtr turnover_;
  ::google::protobuf::internal::ArenaStringPtr volume_;
  ::google::protobuf::int64 ts_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 num_of_trades_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_huobi_5fmarket_5fdownstream_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReqCandlestick : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HuobiProto.ReqCandlestick) */ {
 public:
  ReqCandlestick();
  virtual ~ReqCandlestick();

  ReqCandlestick(const ReqCandlestick& from);

  inline ReqCandlestick& operator=(const ReqCandlestick& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqCandlestick(ReqCandlestick&& from) noexcept
    : ReqCandlestick() {
    *this = ::std::move(from);
  }

  inline ReqCandlestick& operator=(ReqCandlestick&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqCandlestick& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqCandlestick* internal_default_instance() {
    return reinterpret_cast<const ReqCandlestick*>(
               &_ReqCandlestick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ReqCandlestick* other);
  friend void swap(ReqCandlestick& a, ReqCandlestick& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqCandlestick* New() const final {
    return CreateMaybeMessage<ReqCandlestick>(NULL);
  }

  ReqCandlestick* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqCandlestick>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqCandlestick& from);
  void MergeFrom(const ReqCandlestick& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCandlestick* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReqCandlestick_Tick Tick;

  // accessors -------------------------------------------------------

  // repeated .HuobiProto.ReqCandlestick.Tick candlesticks = 2;
  int candlesticks_size() const;
  void clear_candlesticks();
  static const int kCandlesticksFieldNumber = 2;
  ::HuobiProto::ReqCandlestick_Tick* mutable_candlesticks(int index);
  ::google::protobuf::RepeatedPtrField< ::HuobiProto::ReqCandlestick_Tick >*
      mutable_candlesticks();
  const ::HuobiProto::ReqCandlestick_Tick& candlesticks(int index) const;
  ::HuobiProto::ReqCandlestick_Tick* add_candlesticks();
  const ::google::protobuf::RepeatedPtrField< ::HuobiProto::ReqCandlestick_Tick >&
      candlesticks() const;

  // string symbol = 1;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // @@protoc_insertion_point(class_scope:HuobiProto.ReqCandlestick)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::HuobiProto::ReqCandlestick_Tick > candlesticks_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_huobi_5fmarket_5fdownstream_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Depth_Tick : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HuobiProto.Depth.Tick) */ {
 public:
  Depth_Tick();
  virtual ~Depth_Tick();

  Depth_Tick(const Depth_Tick& from);

  inline Depth_Tick& operator=(const Depth_Tick& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Depth_Tick(Depth_Tick&& from) noexcept
    : Depth_Tick() {
    *this = ::std::move(from);
  }

  inline Depth_Tick& operator=(Depth_Tick&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Depth_Tick& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Depth_Tick* internal_default_instance() {
    return reinterpret_cast<const Depth_Tick*>(
               &_Depth_Tick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Depth_Tick* other);
  friend void swap(Depth_Tick& a, Depth_Tick& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Depth_Tick* New() const final {
    return CreateMaybeMessage<Depth_Tick>(NULL);
  }

  Depth_Tick* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Depth_Tick>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Depth_Tick& from);
  void MergeFrom(const Depth_Tick& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Depth_Tick* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string price = 1;
  void clear_price();
  static const int kPriceFieldNumber = 1;
  const ::std::string& price() const;
  void set_price(const ::std::string& value);
  #if LANG_CXX11
  void set_price(::std::string&& value);
  #endif
  void set_price(const char* value);
  void set_price(const char* value, size_t size);
  ::std::string* mutable_price();
  ::std::string* release_price();
  void set_allocated_price(::std::string* price);

  // string size = 2;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  const ::std::string& size() const;
  void set_size(const ::std::string& value);
  #if LANG_CXX11
  void set_size(::std::string&& value);
  #endif
  void set_size(const char* value);
  void set_size(const char* value, size_t size);
  ::std::string* mutable_size();
  ::std::string* release_size();
  void set_allocated_size(::std::string* size);

  // @@protoc_insertion_point(class_scope:HuobiProto.Depth.Tick)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr price_;
  ::google::protobuf::internal::ArenaStringPtr size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_huobi_5fmarket_5fdownstream_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Depth : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HuobiProto.Depth) */ {
 public:
  Depth();
  virtual ~Depth();

  Depth(const Depth& from);

  inline Depth& operator=(const Depth& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Depth(Depth&& from) noexcept
    : Depth() {
    *this = ::std::move(from);
  }

  inline Depth& operator=(Depth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Depth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Depth* internal_default_instance() {
    return reinterpret_cast<const Depth*>(
               &_Depth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Depth* other);
  friend void swap(Depth& a, Depth& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Depth* New() const final {
    return CreateMaybeMessage<Depth>(NULL);
  }

  Depth* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Depth>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Depth& from);
  void MergeFrom(const Depth& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Depth* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Depth_Tick Tick;

  typedef Depth_Step Step;
  static const Step STEP0 =
    Depth_Step_STEP0;
  static const Step STEP1 =
    Depth_Step_STEP1;
  static const Step STEP2 =
    Depth_Step_STEP2;
  static const Step STEP3 =
    Depth_Step_STEP3;
  static const Step STEP4 =
    Depth_Step_STEP4;
  static const Step STEP5 =
    Depth_Step_STEP5;
  static const Step PERCENT10 =
    Depth_Step_PERCENT10;
  static inline bool Step_IsValid(int value) {
    return Depth_Step_IsValid(value);
  }
  static const Step Step_MIN =
    Depth_Step_Step_MIN;
  static const Step Step_MAX =
    Depth_Step_Step_MAX;
  static const int Step_ARRAYSIZE =
    Depth_Step_Step_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Step_descriptor() {
    return Depth_Step_descriptor();
  }
  static inline const ::std::string& Step_Name(Step value) {
    return Depth_Step_Name(value);
  }
  static inline bool Step_Parse(const ::std::string& name,
      Step* value) {
    return Depth_Step_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .HuobiProto.Depth.Tick bids = 2;
  int bids_size() const;
  void clear_bids();
  static const int kBidsFieldNumber = 2;
  ::HuobiProto::Depth_Tick* mutable_bids(int index);
  ::google::protobuf::RepeatedPtrField< ::HuobiProto::Depth_Tick >*
      mutable_bids();
  const ::HuobiProto::Depth_Tick& bids(int index) const;
  ::HuobiProto::Depth_Tick* add_bids();
  const ::google::protobuf::RepeatedPtrField< ::HuobiProto::Depth_Tick >&
      bids() const;

  // repeated .HuobiProto.Depth.Tick asks = 3;
  int asks_size() const;
  void clear_asks();
  static const int kAsksFieldNumber = 3;
  ::HuobiProto::Depth_Tick* mutable_asks(int index);
  ::google::protobuf::RepeatedPtrField< ::HuobiProto::Depth_Tick >*
      mutable_asks();
  const ::HuobiProto::Depth_Tick& asks(int index) const;
  ::HuobiProto::Depth_Tick* add_asks();
  const ::google::protobuf::RepeatedPtrField< ::HuobiProto::Depth_Tick >&
      asks() const;

  // string symbol = 5;
  void clear_symbol();
  static const int kSymbolFieldNumber = 5;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // int64 ts = 1;
  void clear_ts();
  static const int kTsFieldNumber = 1;
  ::google::protobuf::int64 ts() const;
  void set_ts(::google::protobuf::int64 value);

  // bool delta = 4;
  void clear_delta();
  static const int kDeltaFieldNumber = 4;
  bool delta() const;
  void set_delta(bool value);

  // @@protoc_insertion_point(class_scope:HuobiProto.Depth)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::HuobiProto::Depth_Tick > bids_;
  ::google::protobuf::RepeatedPtrField< ::HuobiProto::Depth_Tick > asks_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::int64 ts_;
  bool delta_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_huobi_5fmarket_5fdownstream_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AggrTrade : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HuobiProto.AggrTrade) */ {
 public:
  AggrTrade();
  virtual ~AggrTrade();

  AggrTrade(const AggrTrade& from);

  inline AggrTrade& operator=(const AggrTrade& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AggrTrade(AggrTrade&& from) noexcept
    : AggrTrade() {
    *this = ::std::move(from);
  }

  inline AggrTrade& operator=(AggrTrade&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AggrTrade& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AggrTrade* internal_default_instance() {
    return reinterpret_cast<const AggrTrade*>(
               &_AggrTrade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(AggrTrade* other);
  friend void swap(AggrTrade& a, AggrTrade& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AggrTrade* New() const final {
    return CreateMaybeMessage<AggrTrade>(NULL);
  }

  AggrTrade* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AggrTrade>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AggrTrade& from);
  void MergeFrom(const AggrTrade& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AggrTrade* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string price = 4;
  void clear_price();
  static const int kPriceFieldNumber = 4;
  const ::std::string& price() const;
  void set_price(const ::std::string& value);
  #if LANG_CXX11
  void set_price(::std::string&& value);
  #endif
  void set_price(const char* value);
  void set_price(const char* value, size_t size);
  ::std::string* mutable_price();
  ::std::string* release_price();
  void set_allocated_price(::std::string* price);

  // string volume = 5;
  void clear_volume();
  static const int kVolumeFieldNumber = 5;
  const ::std::string& volume() const;
  void set_volume(const ::std::string& value);
  #if LANG_CXX11
  void set_volume(::std::string&& value);
  #endif
  void set_volume(const char* value);
  void set_volume(const char* value, size_t size);
  ::std::string* mutable_volume();
  ::std::string* release_volume();
  void set_allocated_volume(::std::string* volume);

  // string symbol = 7;
  void clear_symbol();
  static const int kSymbolFieldNumber = 7;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // int64 first_trade_id = 1;
  void clear_first_trade_id();
  static const int kFirstTradeIdFieldNumber = 1;
  ::google::protobuf::int64 first_trade_id() const;
  void set_first_trade_id(::google::protobuf::int64 value);

  // int64 last_trade_id = 2;
  void clear_last_trade_id();
  static const int kLastTradeIdFieldNumber = 2;
  ::google::protobuf::int64 last_trade_id() const;
  void set_last_trade_id(::google::protobuf::int64 value);

  // int64 ts = 3;
  void clear_ts();
  static const int kTsFieldNumber = 3;
  ::google::protobuf::int64 ts() const;
  void set_ts(::google::protobuf::int64 value);

  // .HuobiProto.Side side = 6;
  void clear_side();
  static const int kSideFieldNumber = 6;
  ::HuobiProto::Side side() const;
  void set_side(::HuobiProto::Side value);

  // @@protoc_insertion_point(class_scope:HuobiProto.AggrTrade)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr price_;
  ::google::protobuf::internal::ArenaStringPtr volume_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::int64 first_trade_id_;
  ::google::protobuf::int64 last_trade_id_;
  ::google::protobuf::int64 ts_;
  int side_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_huobi_5fmarket_5fdownstream_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Trade : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HuobiProto.Trade) */ {
 public:
  Trade();
  virtual ~Trade();

  Trade(const Trade& from);

  inline Trade& operator=(const Trade& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Trade(Trade&& from) noexcept
    : Trade() {
    *this = ::std::move(from);
  }

  inline Trade& operator=(Trade&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Trade& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trade* internal_default_instance() {
    return reinterpret_cast<const Trade*>(
               &_Trade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Trade* other);
  friend void swap(Trade& a, Trade& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Trade* New() const final {
    return CreateMaybeMessage<Trade>(NULL);
  }

  Trade* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Trade>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Trade& from);
  void MergeFrom(const Trade& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trade* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string price = 3;
  void clear_price();
  static const int kPriceFieldNumber = 3;
  const ::std::string& price() const;
  void set_price(const ::std::string& value);
  #if LANG_CXX11
  void set_price(::std::string&& value);
  #endif
  void set_price(const char* value);
  void set_price(const char* value, size_t size);
  ::std::string* mutable_price();
  ::std::string* release_price();
  void set_allocated_price(::std::string* price);

  // string volume = 4;
  void clear_volume();
  static const int kVolumeFieldNumber = 4;
  const ::std::string& volume() const;
  void set_volume(const ::std::string& value);
  #if LANG_CXX11
  void set_volume(::std::string&& value);
  #endif
  void set_volume(const char* value);
  void set_volume(const char* value, size_t size);
  ::std::string* mutable_volume();
  ::std::string* release_volume();
  void set_allocated_volume(::std::string* volume);

  // string symbol = 6;
  void clear_symbol();
  static const int kSymbolFieldNumber = 6;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // int64 trade_id = 1;
  void clear_trade_id();
  static const int kTradeIdFieldNumber = 1;
  ::google::protobuf::int64 trade_id() const;
  void set_trade_id(::google::protobuf::int64 value);

  // int64 ts = 2;
  void clear_ts();
  static const int kTsFieldNumber = 2;
  ::google::protobuf::int64 ts() const;
  void set_ts(::google::protobuf::int64 value);

  // .HuobiProto.Side side = 5;
  void clear_side();
  static const int kSideFieldNumber = 5;
  ::HuobiProto::Side side() const;
  void set_side(::HuobiProto::Side value);

  // @@protoc_insertion_point(class_scope:HuobiProto.Trade)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr price_;
  ::google::protobuf::internal::ArenaStringPtr volume_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::int64 trade_id_;
  ::google::protobuf::int64 ts_;
  int side_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_huobi_5fmarket_5fdownstream_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReqTrade_Tick : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HuobiProto.ReqTrade.Tick) */ {
 public:
  ReqTrade_Tick();
  virtual ~ReqTrade_Tick();

  ReqTrade_Tick(const ReqTrade_Tick& from);

  inline ReqTrade_Tick& operator=(const ReqTrade_Tick& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqTrade_Tick(ReqTrade_Tick&& from) noexcept
    : ReqTrade_Tick() {
    *this = ::std::move(from);
  }

  inline ReqTrade_Tick& operator=(ReqTrade_Tick&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqTrade_Tick& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqTrade_Tick* internal_default_instance() {
    return reinterpret_cast<const ReqTrade_Tick*>(
               &_ReqTrade_Tick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ReqTrade_Tick* other);
  friend void swap(ReqTrade_Tick& a, ReqTrade_Tick& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqTrade_Tick* New() const final {
    return CreateMaybeMessage<ReqTrade_Tick>(NULL);
  }

  ReqTrade_Tick* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqTrade_Tick>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqTrade_Tick& from);
  void MergeFrom(const ReqTrade_Tick& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqTrade_Tick* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string price = 3;
  void clear_price();
  static const int kPriceFieldNumber = 3;
  const ::std::string& price() const;
  void set_price(const ::std::string& value);
  #if LANG_CXX11
  void set_price(::std::string&& value);
  #endif
  void set_price(const char* value);
  void set_price(const char* value, size_t size);
  ::std::string* mutable_price();
  ::std::string* release_price();
  void set_allocated_price(::std::string* price);

  // string volume = 4;
  void clear_volume();
  static const int kVolumeFieldNumber = 4;
  const ::std::string& volume() const;
  void set_volume(const ::std::string& value);
  #if LANG_CXX11
  void set_volume(::std::string&& value);
  #endif
  void set_volume(const char* value);
  void set_volume(const char* value, size_t size);
  ::std::string* mutable_volume();
  ::std::string* release_volume();
  void set_allocated_volume(::std::string* volume);

  // int64 trade_id = 1;
  void clear_trade_id();
  static const int kTradeIdFieldNumber = 1;
  ::google::protobuf::int64 trade_id() const;
  void set_trade_id(::google::protobuf::int64 value);

  // int64 ts = 2;
  void clear_ts();
  static const int kTsFieldNumber = 2;
  ::google::protobuf::int64 ts() const;
  void set_ts(::google::protobuf::int64 value);

  // .HuobiProto.Side side = 5;
  void clear_side();
  static const int kSideFieldNumber = 5;
  ::HuobiProto::Side side() const;
  void set_side(::HuobiProto::Side value);

  // @@protoc_insertion_point(class_scope:HuobiProto.ReqTrade.Tick)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr price_;
  ::google::protobuf::internal::ArenaStringPtr volume_;
  ::google::protobuf::int64 trade_id_;
  ::google::protobuf::int64 ts_;
  int side_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_huobi_5fmarket_5fdownstream_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReqTrade : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HuobiProto.ReqTrade) */ {
 public:
  ReqTrade();
  virtual ~ReqTrade();

  ReqTrade(const ReqTrade& from);

  inline ReqTrade& operator=(const ReqTrade& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqTrade(ReqTrade&& from) noexcept
    : ReqTrade() {
    *this = ::std::move(from);
  }

  inline ReqTrade& operator=(ReqTrade&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqTrade& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqTrade* internal_default_instance() {
    return reinterpret_cast<const ReqTrade*>(
               &_ReqTrade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ReqTrade* other);
  friend void swap(ReqTrade& a, ReqTrade& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqTrade* New() const final {
    return CreateMaybeMessage<ReqTrade>(NULL);
  }

  ReqTrade* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqTrade>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqTrade& from);
  void MergeFrom(const ReqTrade& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqTrade* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReqTrade_Tick Tick;

  // accessors -------------------------------------------------------

  // repeated .HuobiProto.ReqTrade.Tick trades = 2;
  int trades_size() const;
  void clear_trades();
  static const int kTradesFieldNumber = 2;
  ::HuobiProto::ReqTrade_Tick* mutable_trades(int index);
  ::google::protobuf::RepeatedPtrField< ::HuobiProto::ReqTrade_Tick >*
      mutable_trades();
  const ::HuobiProto::ReqTrade_Tick& trades(int index) const;
  ::HuobiProto::ReqTrade_Tick* add_trades();
  const ::google::protobuf::RepeatedPtrField< ::HuobiProto::ReqTrade_Tick >&
      trades() const;

  // string symbol = 1;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // @@protoc_insertion_point(class_scope:HuobiProto.ReqTrade)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::HuobiProto::ReqTrade_Tick > trades_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_huobi_5fmarket_5fdownstream_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MarketSummary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HuobiProto.MarketSummary) */ {
 public:
  MarketSummary();
  virtual ~MarketSummary();

  MarketSummary(const MarketSummary& from);

  inline MarketSummary& operator=(const MarketSummary& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MarketSummary(MarketSummary&& from) noexcept
    : MarketSummary() {
    *this = ::std::move(from);
  }

  inline MarketSummary& operator=(MarketSummary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MarketSummary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarketSummary* internal_default_instance() {
    return reinterpret_cast<const MarketSummary*>(
               &_MarketSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(MarketSummary* other);
  friend void swap(MarketSummary& a, MarketSummary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MarketSummary* New() const final {
    return CreateMaybeMessage<MarketSummary>(NULL);
  }

  MarketSummary* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MarketSummary>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MarketSummary& from);
  void MergeFrom(const MarketSummary& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketSummary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string symbol = 1;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // string open = 4;
  void clear_open();
  static const int kOpenFieldNumber = 4;
  const ::std::string& open() const;
  void set_open(const ::std::string& value);
  #if LANG_CXX11
  void set_open(::std::string&& value);
  #endif
  void set_open(const char* value);
  void set_open(const char* value, size_t size);
  ::std::string* mutable_open();
  ::std::string* release_open();
  void set_allocated_open(::std::string* open);

  // string close = 5;
  void clear_close();
  static const int kCloseFieldNumber = 5;
  const ::std::string& close() const;
  void set_close(const ::std::string& value);
  #if LANG_CXX11
  void set_close(::std::string&& value);
  #endif
  void set_close(const char* value);
  void set_close(const char* value, size_t size);
  ::std::string* mutable_close();
  ::std::string* release_close();
  void set_allocated_close(::std::string* close);

  // string low = 6;
  void clear_low();
  static const int kLowFieldNumber = 6;
  const ::std::string& low() const;
  void set_low(const ::std::string& value);
  #if LANG_CXX11
  void set_low(::std::string&& value);
  #endif
  void set_low(const char* value);
  void set_low(const char* value, size_t size);
  ::std::string* mutable_low();
  ::std::string* release_low();
  void set_allocated_low(::std::string* low);

  // string high = 7;
  void clear_high();
  static const int kHighFieldNumber = 7;
  const ::std::string& high() const;
  void set_high(const ::std::string& value);
  #if LANG_CXX11
  void set_high(::std::string&& value);
  #endif
  void set_high(const char* value);
  void set_high(const char* value, size_t size);
  ::std::string* mutable_high();
  ::std::string* release_high();
  void set_allocated_high(::std::string* high);

  // string turnover = 8;
  void clear_turnover();
  static const int kTurnoverFieldNumber = 8;
  const ::std::string& turnover() const;
  void set_turnover(const ::std::string& value);
  #if LANG_CXX11
  void set_turnover(::std::string&& value);
  #endif
  void set_turnover(const char* value);
  void set_turnover(const char* value, size_t size);
  ::std::string* mutable_turnover();
  ::std::string* release_turnover();
  void set_allocated_turnover(::std::string* turnover);

  // string volume = 9;
  void clear_volume();
  static const int kVolumeFieldNumber = 9;
  const ::std::string& volume() const;
  void set_volume(const ::std::string& value);
  #if LANG_CXX11
  void set_volume(::std::string&& value);
  #endif
  void set_volume(const char* value);
  void set_volume(const char* value, size_t size);
  ::std::string* mutable_volume();
  ::std::string* release_volume();
  void set_allocated_volume(::std::string* volume);

  // int64 ts = 2;
  void clear_ts();
  static const int kTsFieldNumber = 2;
  ::google::protobuf::int64 ts() const;
  void set_ts(::google::protobuf::int64 value);

  // int64 id = 3;
  void clear_id();
  static const int kIdFieldNumber = 3;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // int32 num_of_trades = 10;
  void clear_num_of_trades();
  static const int kNumOfTradesFieldNumber = 10;
  ::google::protobuf::int32 num_of_trades() const;
  void set_num_of_trades(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:HuobiProto.MarketSummary)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr open_;
  ::google::protobuf::internal::ArenaStringPtr close_;
  ::google::protobuf::internal::ArenaStringPtr low_;
  ::google::protobuf::internal::ArenaStringPtr high_;
  ::google::protobuf::internal::ArenaStringPtr turnover_;
  ::google::protobuf::internal::ArenaStringPtr volume_;
  ::google::protobuf::int64 ts_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 num_of_trades_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_huobi_5fmarket_5fdownstream_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Overview_Tick : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HuobiProto.Overview.Tick) */ {
 public:
  Overview_Tick();
  virtual ~Overview_Tick();

  Overview_Tick(const Overview_Tick& from);

  inline Overview_Tick& operator=(const Overview_Tick& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Overview_Tick(Overview_Tick&& from) noexcept
    : Overview_Tick() {
    *this = ::std::move(from);
  }

  inline Overview_Tick& operator=(Overview_Tick&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Overview_Tick& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Overview_Tick* internal_default_instance() {
    return reinterpret_cast<const Overview_Tick*>(
               &_Overview_Tick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Overview_Tick* other);
  friend void swap(Overview_Tick& a, Overview_Tick& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Overview_Tick* New() const final {
    return CreateMaybeMessage<Overview_Tick>(NULL);
  }

  Overview_Tick* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Overview_Tick>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Overview_Tick& from);
  void MergeFrom(const Overview_Tick& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Overview_Tick* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string symbol = 1;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // string open = 2;
  void clear_open();
  static const int kOpenFieldNumber = 2;
  const ::std::string& open() const;
  void set_open(const ::std::string& value);
  #if LANG_CXX11
  void set_open(::std::string&& value);
  #endif
  void set_open(const char* value);
  void set_open(const char* value, size_t size);
  ::std::string* mutable_open();
  ::std::string* release_open();
  void set_allocated_open(::std::string* open);

  // string close = 3;
  void clear_close();
  static const int kCloseFieldNumber = 3;
  const ::std::string& close() const;
  void set_close(const ::std::string& value);
  #if LANG_CXX11
  void set_close(::std::string&& value);
  #endif
  void set_close(const char* value);
  void set_close(const char* value, size_t size);
  ::std::string* mutable_close();
  ::std::string* release_close();
  void set_allocated_close(::std::string* close);

  // string low = 4;
  void clear_low();
  static const int kLowFieldNumber = 4;
  const ::std::string& low() const;
  void set_low(const ::std::string& value);
  #if LANG_CXX11
  void set_low(::std::string&& value);
  #endif
  void set_low(const char* value);
  void set_low(const char* value, size_t size);
  ::std::string* mutable_low();
  ::std::string* release_low();
  void set_allocated_low(::std::string* low);

  // string high = 5;
  void clear_high();
  static const int kHighFieldNumber = 5;
  const ::std::string& high() const;
  void set_high(const ::std::string& value);
  #if LANG_CXX11
  void set_high(::std::string&& value);
  #endif
  void set_high(const char* value);
  void set_high(const char* value, size_t size);
  ::std::string* mutable_high();
  ::std::string* release_high();
  void set_allocated_high(::std::string* high);

  // string turnover = 6;
  void clear_turnover();
  static const int kTurnoverFieldNumber = 6;
  const ::std::string& turnover() const;
  void set_turnover(const ::std::string& value);
  #if LANG_CXX11
  void set_turnover(::std::string&& value);
  #endif
  void set_turnover(const char* value);
  void set_turnover(const char* value, size_t size);
  ::std::string* mutable_turnover();
  ::std::string* release_turnover();
  void set_allocated_turnover(::std::string* turnover);

  // string volume = 7;
  void clear_volume();
  static const int kVolumeFieldNumber = 7;
  const ::std::string& volume() const;
  void set_volume(const ::std::string& value);
  #if LANG_CXX11
  void set_volume(::std::string&& value);
  #endif
  void set_volume(const char* value);
  void set_volume(const char* value, size_t size);
  ::std::string* mutable_volume();
  ::std::string* release_volume();
  void set_allocated_volume(::std::string* volume);

  // int32 num_of_trades = 8;
  void clear_num_of_trades();
  static const int kNumOfTradesFieldNumber = 8;
  ::google::protobuf::int32 num_of_trades() const;
  void set_num_of_trades(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:HuobiProto.Overview.Tick)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr open_;
  ::google::protobuf::internal::ArenaStringPtr close_;
  ::google::protobuf::internal::ArenaStringPtr low_;
  ::google::protobuf::internal::ArenaStringPtr high_;
  ::google::protobuf::internal::ArenaStringPtr turnover_;
  ::google::protobuf::internal::ArenaStringPtr volume_;
  ::google::protobuf::int32 num_of_trades_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_huobi_5fmarket_5fdownstream_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Overview : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HuobiProto.Overview) */ {
 public:
  Overview();
  virtual ~Overview();

  Overview(const Overview& from);

  inline Overview& operator=(const Overview& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Overview(Overview&& from) noexcept
    : Overview() {
    *this = ::std::move(from);
  }

  inline Overview& operator=(Overview&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Overview& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Overview* internal_default_instance() {
    return reinterpret_cast<const Overview*>(
               &_Overview_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(Overview* other);
  friend void swap(Overview& a, Overview& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Overview* New() const final {
    return CreateMaybeMessage<Overview>(NULL);
  }

  Overview* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Overview>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Overview& from);
  void MergeFrom(const Overview& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Overview* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Overview_Tick Tick;

  // accessors -------------------------------------------------------

  // repeated .HuobiProto.Overview.Tick tick = 2;
  int tick_size() const;
  void clear_tick();
  static const int kTickFieldNumber = 2;
  ::HuobiProto::Overview_Tick* mutable_tick(int index);
  ::google::protobuf::RepeatedPtrField< ::HuobiProto::Overview_Tick >*
      mutable_tick();
  const ::HuobiProto::Overview_Tick& tick(int index) const;
  ::HuobiProto::Overview_Tick* add_tick();
  const ::google::protobuf::RepeatedPtrField< ::HuobiProto::Overview_Tick >&
      tick() const;

  // int64 ts = 1;
  void clear_ts();
  static const int kTsFieldNumber = 1;
  ::google::protobuf::int64 ts() const;
  void set_ts(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:HuobiProto.Overview)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::HuobiProto::Overview_Tick > tick_;
  ::google::protobuf::int64 ts_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_huobi_5fmarket_5fdownstream_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ping : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HuobiProto.Ping) */ {
 public:
  Ping();
  virtual ~Ping();

  Ping(const Ping& from);

  inline Ping& operator=(const Ping& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ping(Ping&& from) noexcept
    : Ping() {
    *this = ::std::move(from);
  }

  inline Ping& operator=(Ping&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ping& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ping* internal_default_instance() {
    return reinterpret_cast<const Ping*>(
               &_Ping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(Ping* other);
  friend void swap(Ping& a, Ping& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ping* New() const final {
    return CreateMaybeMessage<Ping>(NULL);
  }

  Ping* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ping>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ping& from);
  void MergeFrom(const Ping& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ping* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 ts = 1;
  void clear_ts();
  static const int kTsFieldNumber = 1;
  ::google::protobuf::int64 ts() const;
  void set_ts(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:HuobiProto.Ping)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 ts_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_huobi_5fmarket_5fdownstream_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Result : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HuobiProto.Result) */ {
 public:
  Result();
  virtual ~Result();

  Result(const Result& from);

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(Result&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Result& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(Result* other);
  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Result* New() const final {
    return CreateMaybeMessage<Result>(NULL);
  }

  Result* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ch = 4;
  void clear_ch();
  static const int kChFieldNumber = 4;
  const ::std::string& ch() const;
  void set_ch(const ::std::string& value);
  #if LANG_CXX11
  void set_ch(::std::string&& value);
  #endif
  void set_ch(const char* value);
  void set_ch(const char* value, size_t size);
  ::std::string* mutable_ch();
  ::std::string* release_ch();
  void set_allocated_ch(::std::string* ch);

  // string message = 5;
  void clear_message();
  static const int kMessageFieldNumber = 5;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .google.protobuf.Any data = 15;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 15;
  private:
  const ::google::protobuf::Any& _internal_data() const;
  public:
  const ::google::protobuf::Any& data() const;
  ::google::protobuf::Any* release_data();
  ::google::protobuf::Any* mutable_data();
  void set_allocated_data(::google::protobuf::Any* data);

  // int64 sequence = 2;
  void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  ::google::protobuf::int64 sequence() const;
  void set_sequence(::google::protobuf::int64 value);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // .HuobiProto.Action action = 3;
  void clear_action();
  static const int kActionFieldNumber = 3;
  ::HuobiProto::Action action() const;
  void set_action(::HuobiProto::Action value);

  // @@protoc_insertion_point(class_scope:HuobiProto.Result)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ch_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::Any* data_;
  ::google::protobuf::int64 sequence_;
  ::google::protobuf::int32 code_;
  int action_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_huobi_5fmarket_5fdownstream_5fprotocol_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Candlestick

// int64 ts = 1;
inline void Candlestick::clear_ts() {
  ts_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Candlestick::ts() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Candlestick.ts)
  return ts_;
}
inline void Candlestick::set_ts(::google::protobuf::int64 value) {
  
  ts_ = value;
  // @@protoc_insertion_point(field_set:HuobiProto.Candlestick.ts)
}

// int64 id = 2;
inline void Candlestick::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Candlestick::id() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Candlestick.id)
  return id_;
}
inline void Candlestick::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:HuobiProto.Candlestick.id)
}

// string open = 3;
inline void Candlestick::clear_open() {
  open_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Candlestick::open() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Candlestick.open)
  return open_.GetNoArena();
}
inline void Candlestick::set_open(const ::std::string& value) {
  
  open_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.Candlestick.open)
}
#if LANG_CXX11
inline void Candlestick::set_open(::std::string&& value) {
  
  open_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.Candlestick.open)
}
#endif
inline void Candlestick::set_open(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  open_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.Candlestick.open)
}
inline void Candlestick::set_open(const char* value, size_t size) {
  
  open_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.Candlestick.open)
}
inline ::std::string* Candlestick::mutable_open() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.Candlestick.open)
  return open_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Candlestick::release_open() {
  // @@protoc_insertion_point(field_release:HuobiProto.Candlestick.open)
  
  return open_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Candlestick::set_allocated_open(::std::string* open) {
  if (open != NULL) {
    
  } else {
    
  }
  open_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), open);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.Candlestick.open)
}

// string close = 4;
inline void Candlestick::clear_close() {
  close_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Candlestick::close() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Candlestick.close)
  return close_.GetNoArena();
}
inline void Candlestick::set_close(const ::std::string& value) {
  
  close_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.Candlestick.close)
}
#if LANG_CXX11
inline void Candlestick::set_close(::std::string&& value) {
  
  close_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.Candlestick.close)
}
#endif
inline void Candlestick::set_close(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  close_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.Candlestick.close)
}
inline void Candlestick::set_close(const char* value, size_t size) {
  
  close_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.Candlestick.close)
}
inline ::std::string* Candlestick::mutable_close() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.Candlestick.close)
  return close_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Candlestick::release_close() {
  // @@protoc_insertion_point(field_release:HuobiProto.Candlestick.close)
  
  return close_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Candlestick::set_allocated_close(::std::string* close) {
  if (close != NULL) {
    
  } else {
    
  }
  close_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), close);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.Candlestick.close)
}

// string low = 5;
inline void Candlestick::clear_low() {
  low_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Candlestick::low() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Candlestick.low)
  return low_.GetNoArena();
}
inline void Candlestick::set_low(const ::std::string& value) {
  
  low_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.Candlestick.low)
}
#if LANG_CXX11
inline void Candlestick::set_low(::std::string&& value) {
  
  low_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.Candlestick.low)
}
#endif
inline void Candlestick::set_low(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  low_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.Candlestick.low)
}
inline void Candlestick::set_low(const char* value, size_t size) {
  
  low_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.Candlestick.low)
}
inline ::std::string* Candlestick::mutable_low() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.Candlestick.low)
  return low_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Candlestick::release_low() {
  // @@protoc_insertion_point(field_release:HuobiProto.Candlestick.low)
  
  return low_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Candlestick::set_allocated_low(::std::string* low) {
  if (low != NULL) {
    
  } else {
    
  }
  low_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), low);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.Candlestick.low)
}

// string high = 6;
inline void Candlestick::clear_high() {
  high_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Candlestick::high() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Candlestick.high)
  return high_.GetNoArena();
}
inline void Candlestick::set_high(const ::std::string& value) {
  
  high_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.Candlestick.high)
}
#if LANG_CXX11
inline void Candlestick::set_high(::std::string&& value) {
  
  high_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.Candlestick.high)
}
#endif
inline void Candlestick::set_high(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  high_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.Candlestick.high)
}
inline void Candlestick::set_high(const char* value, size_t size) {
  
  high_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.Candlestick.high)
}
inline ::std::string* Candlestick::mutable_high() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.Candlestick.high)
  return high_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Candlestick::release_high() {
  // @@protoc_insertion_point(field_release:HuobiProto.Candlestick.high)
  
  return high_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Candlestick::set_allocated_high(::std::string* high) {
  if (high != NULL) {
    
  } else {
    
  }
  high_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), high);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.Candlestick.high)
}

// string turnover = 7;
inline void Candlestick::clear_turnover() {
  turnover_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Candlestick::turnover() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Candlestick.turnover)
  return turnover_.GetNoArena();
}
inline void Candlestick::set_turnover(const ::std::string& value) {
  
  turnover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.Candlestick.turnover)
}
#if LANG_CXX11
inline void Candlestick::set_turnover(::std::string&& value) {
  
  turnover_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.Candlestick.turnover)
}
#endif
inline void Candlestick::set_turnover(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  turnover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.Candlestick.turnover)
}
inline void Candlestick::set_turnover(const char* value, size_t size) {
  
  turnover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.Candlestick.turnover)
}
inline ::std::string* Candlestick::mutable_turnover() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.Candlestick.turnover)
  return turnover_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Candlestick::release_turnover() {
  // @@protoc_insertion_point(field_release:HuobiProto.Candlestick.turnover)
  
  return turnover_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Candlestick::set_allocated_turnover(::std::string* turnover) {
  if (turnover != NULL) {
    
  } else {
    
  }
  turnover_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), turnover);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.Candlestick.turnover)
}

// string volume = 8;
inline void Candlestick::clear_volume() {
  volume_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Candlestick::volume() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Candlestick.volume)
  return volume_.GetNoArena();
}
inline void Candlestick::set_volume(const ::std::string& value) {
  
  volume_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.Candlestick.volume)
}
#if LANG_CXX11
inline void Candlestick::set_volume(::std::string&& value) {
  
  volume_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.Candlestick.volume)
}
#endif
inline void Candlestick::set_volume(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  volume_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.Candlestick.volume)
}
inline void Candlestick::set_volume(const char* value, size_t size) {
  
  volume_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.Candlestick.volume)
}
inline ::std::string* Candlestick::mutable_volume() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.Candlestick.volume)
  return volume_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Candlestick::release_volume() {
  // @@protoc_insertion_point(field_release:HuobiProto.Candlestick.volume)
  
  return volume_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Candlestick::set_allocated_volume(::std::string* volume) {
  if (volume != NULL) {
    
  } else {
    
  }
  volume_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), volume);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.Candlestick.volume)
}

// int32 num_of_trades = 9;
inline void Candlestick::clear_num_of_trades() {
  num_of_trades_ = 0;
}
inline ::google::protobuf::int32 Candlestick::num_of_trades() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Candlestick.num_of_trades)
  return num_of_trades_;
}
inline void Candlestick::set_num_of_trades(::google::protobuf::int32 value) {
  
  num_of_trades_ = value;
  // @@protoc_insertion_point(field_set:HuobiProto.Candlestick.num_of_trades)
}

// string symbol = 10;
inline void Candlestick::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Candlestick::symbol() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Candlestick.symbol)
  return symbol_.GetNoArena();
}
inline void Candlestick::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.Candlestick.symbol)
}
#if LANG_CXX11
inline void Candlestick::set_symbol(::std::string&& value) {
  
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.Candlestick.symbol)
}
#endif
inline void Candlestick::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.Candlestick.symbol)
}
inline void Candlestick::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.Candlestick.symbol)
}
inline ::std::string* Candlestick::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.Candlestick.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Candlestick::release_symbol() {
  // @@protoc_insertion_point(field_release:HuobiProto.Candlestick.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Candlestick::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.Candlestick.symbol)
}

// -------------------------------------------------------------------

// ReqCandlestick_Tick

// int64 ts = 1;
inline void ReqCandlestick_Tick::clear_ts() {
  ts_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ReqCandlestick_Tick::ts() const {
  // @@protoc_insertion_point(field_get:HuobiProto.ReqCandlestick.Tick.ts)
  return ts_;
}
inline void ReqCandlestick_Tick::set_ts(::google::protobuf::int64 value) {
  
  ts_ = value;
  // @@protoc_insertion_point(field_set:HuobiProto.ReqCandlestick.Tick.ts)
}

// int64 id = 2;
inline void ReqCandlestick_Tick::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ReqCandlestick_Tick::id() const {
  // @@protoc_insertion_point(field_get:HuobiProto.ReqCandlestick.Tick.id)
  return id_;
}
inline void ReqCandlestick_Tick::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:HuobiProto.ReqCandlestick.Tick.id)
}

// string open = 3;
inline void ReqCandlestick_Tick::clear_open() {
  open_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqCandlestick_Tick::open() const {
  // @@protoc_insertion_point(field_get:HuobiProto.ReqCandlestick.Tick.open)
  return open_.GetNoArena();
}
inline void ReqCandlestick_Tick::set_open(const ::std::string& value) {
  
  open_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.ReqCandlestick.Tick.open)
}
#if LANG_CXX11
inline void ReqCandlestick_Tick::set_open(::std::string&& value) {
  
  open_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.ReqCandlestick.Tick.open)
}
#endif
inline void ReqCandlestick_Tick::set_open(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  open_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.ReqCandlestick.Tick.open)
}
inline void ReqCandlestick_Tick::set_open(const char* value, size_t size) {
  
  open_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.ReqCandlestick.Tick.open)
}
inline ::std::string* ReqCandlestick_Tick::mutable_open() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.ReqCandlestick.Tick.open)
  return open_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqCandlestick_Tick::release_open() {
  // @@protoc_insertion_point(field_release:HuobiProto.ReqCandlestick.Tick.open)
  
  return open_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqCandlestick_Tick::set_allocated_open(::std::string* open) {
  if (open != NULL) {
    
  } else {
    
  }
  open_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), open);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.ReqCandlestick.Tick.open)
}

// string close = 4;
inline void ReqCandlestick_Tick::clear_close() {
  close_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqCandlestick_Tick::close() const {
  // @@protoc_insertion_point(field_get:HuobiProto.ReqCandlestick.Tick.close)
  return close_.GetNoArena();
}
inline void ReqCandlestick_Tick::set_close(const ::std::string& value) {
  
  close_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.ReqCandlestick.Tick.close)
}
#if LANG_CXX11
inline void ReqCandlestick_Tick::set_close(::std::string&& value) {
  
  close_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.ReqCandlestick.Tick.close)
}
#endif
inline void ReqCandlestick_Tick::set_close(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  close_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.ReqCandlestick.Tick.close)
}
inline void ReqCandlestick_Tick::set_close(const char* value, size_t size) {
  
  close_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.ReqCandlestick.Tick.close)
}
inline ::std::string* ReqCandlestick_Tick::mutable_close() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.ReqCandlestick.Tick.close)
  return close_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqCandlestick_Tick::release_close() {
  // @@protoc_insertion_point(field_release:HuobiProto.ReqCandlestick.Tick.close)
  
  return close_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqCandlestick_Tick::set_allocated_close(::std::string* close) {
  if (close != NULL) {
    
  } else {
    
  }
  close_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), close);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.ReqCandlestick.Tick.close)
}

// string low = 5;
inline void ReqCandlestick_Tick::clear_low() {
  low_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqCandlestick_Tick::low() const {
  // @@protoc_insertion_point(field_get:HuobiProto.ReqCandlestick.Tick.low)
  return low_.GetNoArena();
}
inline void ReqCandlestick_Tick::set_low(const ::std::string& value) {
  
  low_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.ReqCandlestick.Tick.low)
}
#if LANG_CXX11
inline void ReqCandlestick_Tick::set_low(::std::string&& value) {
  
  low_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.ReqCandlestick.Tick.low)
}
#endif
inline void ReqCandlestick_Tick::set_low(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  low_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.ReqCandlestick.Tick.low)
}
inline void ReqCandlestick_Tick::set_low(const char* value, size_t size) {
  
  low_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.ReqCandlestick.Tick.low)
}
inline ::std::string* ReqCandlestick_Tick::mutable_low() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.ReqCandlestick.Tick.low)
  return low_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqCandlestick_Tick::release_low() {
  // @@protoc_insertion_point(field_release:HuobiProto.ReqCandlestick.Tick.low)
  
  return low_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqCandlestick_Tick::set_allocated_low(::std::string* low) {
  if (low != NULL) {
    
  } else {
    
  }
  low_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), low);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.ReqCandlestick.Tick.low)
}

// string high = 6;
inline void ReqCandlestick_Tick::clear_high() {
  high_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqCandlestick_Tick::high() const {
  // @@protoc_insertion_point(field_get:HuobiProto.ReqCandlestick.Tick.high)
  return high_.GetNoArena();
}
inline void ReqCandlestick_Tick::set_high(const ::std::string& value) {
  
  high_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.ReqCandlestick.Tick.high)
}
#if LANG_CXX11
inline void ReqCandlestick_Tick::set_high(::std::string&& value) {
  
  high_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.ReqCandlestick.Tick.high)
}
#endif
inline void ReqCandlestick_Tick::set_high(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  high_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.ReqCandlestick.Tick.high)
}
inline void ReqCandlestick_Tick::set_high(const char* value, size_t size) {
  
  high_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.ReqCandlestick.Tick.high)
}
inline ::std::string* ReqCandlestick_Tick::mutable_high() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.ReqCandlestick.Tick.high)
  return high_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqCandlestick_Tick::release_high() {
  // @@protoc_insertion_point(field_release:HuobiProto.ReqCandlestick.Tick.high)
  
  return high_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqCandlestick_Tick::set_allocated_high(::std::string* high) {
  if (high != NULL) {
    
  } else {
    
  }
  high_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), high);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.ReqCandlestick.Tick.high)
}

// string turnover = 7;
inline void ReqCandlestick_Tick::clear_turnover() {
  turnover_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqCandlestick_Tick::turnover() const {
  // @@protoc_insertion_point(field_get:HuobiProto.ReqCandlestick.Tick.turnover)
  return turnover_.GetNoArena();
}
inline void ReqCandlestick_Tick::set_turnover(const ::std::string& value) {
  
  turnover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.ReqCandlestick.Tick.turnover)
}
#if LANG_CXX11
inline void ReqCandlestick_Tick::set_turnover(::std::string&& value) {
  
  turnover_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.ReqCandlestick.Tick.turnover)
}
#endif
inline void ReqCandlestick_Tick::set_turnover(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  turnover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.ReqCandlestick.Tick.turnover)
}
inline void ReqCandlestick_Tick::set_turnover(const char* value, size_t size) {
  
  turnover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.ReqCandlestick.Tick.turnover)
}
inline ::std::string* ReqCandlestick_Tick::mutable_turnover() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.ReqCandlestick.Tick.turnover)
  return turnover_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqCandlestick_Tick::release_turnover() {
  // @@protoc_insertion_point(field_release:HuobiProto.ReqCandlestick.Tick.turnover)
  
  return turnover_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqCandlestick_Tick::set_allocated_turnover(::std::string* turnover) {
  if (turnover != NULL) {
    
  } else {
    
  }
  turnover_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), turnover);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.ReqCandlestick.Tick.turnover)
}

// string volume = 8;
inline void ReqCandlestick_Tick::clear_volume() {
  volume_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqCandlestick_Tick::volume() const {
  // @@protoc_insertion_point(field_get:HuobiProto.ReqCandlestick.Tick.volume)
  return volume_.GetNoArena();
}
inline void ReqCandlestick_Tick::set_volume(const ::std::string& value) {
  
  volume_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.ReqCandlestick.Tick.volume)
}
#if LANG_CXX11
inline void ReqCandlestick_Tick::set_volume(::std::string&& value) {
  
  volume_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.ReqCandlestick.Tick.volume)
}
#endif
inline void ReqCandlestick_Tick::set_volume(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  volume_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.ReqCandlestick.Tick.volume)
}
inline void ReqCandlestick_Tick::set_volume(const char* value, size_t size) {
  
  volume_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.ReqCandlestick.Tick.volume)
}
inline ::std::string* ReqCandlestick_Tick::mutable_volume() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.ReqCandlestick.Tick.volume)
  return volume_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqCandlestick_Tick::release_volume() {
  // @@protoc_insertion_point(field_release:HuobiProto.ReqCandlestick.Tick.volume)
  
  return volume_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqCandlestick_Tick::set_allocated_volume(::std::string* volume) {
  if (volume != NULL) {
    
  } else {
    
  }
  volume_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), volume);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.ReqCandlestick.Tick.volume)
}

// int32 num_of_trades = 9;
inline void ReqCandlestick_Tick::clear_num_of_trades() {
  num_of_trades_ = 0;
}
inline ::google::protobuf::int32 ReqCandlestick_Tick::num_of_trades() const {
  // @@protoc_insertion_point(field_get:HuobiProto.ReqCandlestick.Tick.num_of_trades)
  return num_of_trades_;
}
inline void ReqCandlestick_Tick::set_num_of_trades(::google::protobuf::int32 value) {
  
  num_of_trades_ = value;
  // @@protoc_insertion_point(field_set:HuobiProto.ReqCandlestick.Tick.num_of_trades)
}

// -------------------------------------------------------------------

// ReqCandlestick

// string symbol = 1;
inline void ReqCandlestick::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqCandlestick::symbol() const {
  // @@protoc_insertion_point(field_get:HuobiProto.ReqCandlestick.symbol)
  return symbol_.GetNoArena();
}
inline void ReqCandlestick::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.ReqCandlestick.symbol)
}
#if LANG_CXX11
inline void ReqCandlestick::set_symbol(::std::string&& value) {
  
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.ReqCandlestick.symbol)
}
#endif
inline void ReqCandlestick::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.ReqCandlestick.symbol)
}
inline void ReqCandlestick::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.ReqCandlestick.symbol)
}
inline ::std::string* ReqCandlestick::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.ReqCandlestick.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqCandlestick::release_symbol() {
  // @@protoc_insertion_point(field_release:HuobiProto.ReqCandlestick.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqCandlestick::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.ReqCandlestick.symbol)
}

// repeated .HuobiProto.ReqCandlestick.Tick candlesticks = 2;
inline int ReqCandlestick::candlesticks_size() const {
  return candlesticks_.size();
}
inline void ReqCandlestick::clear_candlesticks() {
  candlesticks_.Clear();
}
inline ::HuobiProto::ReqCandlestick_Tick* ReqCandlestick::mutable_candlesticks(int index) {
  // @@protoc_insertion_point(field_mutable:HuobiProto.ReqCandlestick.candlesticks)
  return candlesticks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::HuobiProto::ReqCandlestick_Tick >*
ReqCandlestick::mutable_candlesticks() {
  // @@protoc_insertion_point(field_mutable_list:HuobiProto.ReqCandlestick.candlesticks)
  return &candlesticks_;
}
inline const ::HuobiProto::ReqCandlestick_Tick& ReqCandlestick::candlesticks(int index) const {
  // @@protoc_insertion_point(field_get:HuobiProto.ReqCandlestick.candlesticks)
  return candlesticks_.Get(index);
}
inline ::HuobiProto::ReqCandlestick_Tick* ReqCandlestick::add_candlesticks() {
  // @@protoc_insertion_point(field_add:HuobiProto.ReqCandlestick.candlesticks)
  return candlesticks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HuobiProto::ReqCandlestick_Tick >&
ReqCandlestick::candlesticks() const {
  // @@protoc_insertion_point(field_list:HuobiProto.ReqCandlestick.candlesticks)
  return candlesticks_;
}

// -------------------------------------------------------------------

// Depth_Tick

// string price = 1;
inline void Depth_Tick::clear_price() {
  price_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Depth_Tick::price() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Depth.Tick.price)
  return price_.GetNoArena();
}
inline void Depth_Tick::set_price(const ::std::string& value) {
  
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.Depth.Tick.price)
}
#if LANG_CXX11
inline void Depth_Tick::set_price(::std::string&& value) {
  
  price_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.Depth.Tick.price)
}
#endif
inline void Depth_Tick::set_price(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.Depth.Tick.price)
}
inline void Depth_Tick::set_price(const char* value, size_t size) {
  
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.Depth.Tick.price)
}
inline ::std::string* Depth_Tick::mutable_price() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.Depth.Tick.price)
  return price_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Depth_Tick::release_price() {
  // @@protoc_insertion_point(field_release:HuobiProto.Depth.Tick.price)
  
  return price_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Depth_Tick::set_allocated_price(::std::string* price) {
  if (price != NULL) {
    
  } else {
    
  }
  price_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), price);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.Depth.Tick.price)
}

// string size = 2;
inline void Depth_Tick::clear_size() {
  size_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Depth_Tick::size() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Depth.Tick.size)
  return size_.GetNoArena();
}
inline void Depth_Tick::set_size(const ::std::string& value) {
  
  size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.Depth.Tick.size)
}
#if LANG_CXX11
inline void Depth_Tick::set_size(::std::string&& value) {
  
  size_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.Depth.Tick.size)
}
#endif
inline void Depth_Tick::set_size(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.Depth.Tick.size)
}
inline void Depth_Tick::set_size(const char* value, size_t size) {
  
  size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.Depth.Tick.size)
}
inline ::std::string* Depth_Tick::mutable_size() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.Depth.Tick.size)
  return size_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Depth_Tick::release_size() {
  // @@protoc_insertion_point(field_release:HuobiProto.Depth.Tick.size)
  
  return size_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Depth_Tick::set_allocated_size(::std::string* size) {
  if (size != NULL) {
    
  } else {
    
  }
  size_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), size);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.Depth.Tick.size)
}

// -------------------------------------------------------------------

// Depth

// int64 ts = 1;
inline void Depth::clear_ts() {
  ts_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Depth::ts() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Depth.ts)
  return ts_;
}
inline void Depth::set_ts(::google::protobuf::int64 value) {
  
  ts_ = value;
  // @@protoc_insertion_point(field_set:HuobiProto.Depth.ts)
}

// repeated .HuobiProto.Depth.Tick bids = 2;
inline int Depth::bids_size() const {
  return bids_.size();
}
inline void Depth::clear_bids() {
  bids_.Clear();
}
inline ::HuobiProto::Depth_Tick* Depth::mutable_bids(int index) {
  // @@protoc_insertion_point(field_mutable:HuobiProto.Depth.bids)
  return bids_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::HuobiProto::Depth_Tick >*
Depth::mutable_bids() {
  // @@protoc_insertion_point(field_mutable_list:HuobiProto.Depth.bids)
  return &bids_;
}
inline const ::HuobiProto::Depth_Tick& Depth::bids(int index) const {
  // @@protoc_insertion_point(field_get:HuobiProto.Depth.bids)
  return bids_.Get(index);
}
inline ::HuobiProto::Depth_Tick* Depth::add_bids() {
  // @@protoc_insertion_point(field_add:HuobiProto.Depth.bids)
  return bids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HuobiProto::Depth_Tick >&
Depth::bids() const {
  // @@protoc_insertion_point(field_list:HuobiProto.Depth.bids)
  return bids_;
}

// repeated .HuobiProto.Depth.Tick asks = 3;
inline int Depth::asks_size() const {
  return asks_.size();
}
inline void Depth::clear_asks() {
  asks_.Clear();
}
inline ::HuobiProto::Depth_Tick* Depth::mutable_asks(int index) {
  // @@protoc_insertion_point(field_mutable:HuobiProto.Depth.asks)
  return asks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::HuobiProto::Depth_Tick >*
Depth::mutable_asks() {
  // @@protoc_insertion_point(field_mutable_list:HuobiProto.Depth.asks)
  return &asks_;
}
inline const ::HuobiProto::Depth_Tick& Depth::asks(int index) const {
  // @@protoc_insertion_point(field_get:HuobiProto.Depth.asks)
  return asks_.Get(index);
}
inline ::HuobiProto::Depth_Tick* Depth::add_asks() {
  // @@protoc_insertion_point(field_add:HuobiProto.Depth.asks)
  return asks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HuobiProto::Depth_Tick >&
Depth::asks() const {
  // @@protoc_insertion_point(field_list:HuobiProto.Depth.asks)
  return asks_;
}

// bool delta = 4;
inline void Depth::clear_delta() {
  delta_ = false;
}
inline bool Depth::delta() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Depth.delta)
  return delta_;
}
inline void Depth::set_delta(bool value) {
  
  delta_ = value;
  // @@protoc_insertion_point(field_set:HuobiProto.Depth.delta)
}

// string symbol = 5;
inline void Depth::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Depth::symbol() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Depth.symbol)
  return symbol_.GetNoArena();
}
inline void Depth::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.Depth.symbol)
}
#if LANG_CXX11
inline void Depth::set_symbol(::std::string&& value) {
  
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.Depth.symbol)
}
#endif
inline void Depth::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.Depth.symbol)
}
inline void Depth::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.Depth.symbol)
}
inline ::std::string* Depth::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.Depth.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Depth::release_symbol() {
  // @@protoc_insertion_point(field_release:HuobiProto.Depth.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Depth::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.Depth.symbol)
}

// -------------------------------------------------------------------

// AggrTrade

// int64 first_trade_id = 1;
inline void AggrTrade::clear_first_trade_id() {
  first_trade_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AggrTrade::first_trade_id() const {
  // @@protoc_insertion_point(field_get:HuobiProto.AggrTrade.first_trade_id)
  return first_trade_id_;
}
inline void AggrTrade::set_first_trade_id(::google::protobuf::int64 value) {
  
  first_trade_id_ = value;
  // @@protoc_insertion_point(field_set:HuobiProto.AggrTrade.first_trade_id)
}

// int64 last_trade_id = 2;
inline void AggrTrade::clear_last_trade_id() {
  last_trade_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AggrTrade::last_trade_id() const {
  // @@protoc_insertion_point(field_get:HuobiProto.AggrTrade.last_trade_id)
  return last_trade_id_;
}
inline void AggrTrade::set_last_trade_id(::google::protobuf::int64 value) {
  
  last_trade_id_ = value;
  // @@protoc_insertion_point(field_set:HuobiProto.AggrTrade.last_trade_id)
}

// int64 ts = 3;
inline void AggrTrade::clear_ts() {
  ts_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AggrTrade::ts() const {
  // @@protoc_insertion_point(field_get:HuobiProto.AggrTrade.ts)
  return ts_;
}
inline void AggrTrade::set_ts(::google::protobuf::int64 value) {
  
  ts_ = value;
  // @@protoc_insertion_point(field_set:HuobiProto.AggrTrade.ts)
}

// string price = 4;
inline void AggrTrade::clear_price() {
  price_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AggrTrade::price() const {
  // @@protoc_insertion_point(field_get:HuobiProto.AggrTrade.price)
  return price_.GetNoArena();
}
inline void AggrTrade::set_price(const ::std::string& value) {
  
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.AggrTrade.price)
}
#if LANG_CXX11
inline void AggrTrade::set_price(::std::string&& value) {
  
  price_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.AggrTrade.price)
}
#endif
inline void AggrTrade::set_price(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.AggrTrade.price)
}
inline void AggrTrade::set_price(const char* value, size_t size) {
  
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.AggrTrade.price)
}
inline ::std::string* AggrTrade::mutable_price() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.AggrTrade.price)
  return price_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AggrTrade::release_price() {
  // @@protoc_insertion_point(field_release:HuobiProto.AggrTrade.price)
  
  return price_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AggrTrade::set_allocated_price(::std::string* price) {
  if (price != NULL) {
    
  } else {
    
  }
  price_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), price);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.AggrTrade.price)
}

// string volume = 5;
inline void AggrTrade::clear_volume() {
  volume_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AggrTrade::volume() const {
  // @@protoc_insertion_point(field_get:HuobiProto.AggrTrade.volume)
  return volume_.GetNoArena();
}
inline void AggrTrade::set_volume(const ::std::string& value) {
  
  volume_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.AggrTrade.volume)
}
#if LANG_CXX11
inline void AggrTrade::set_volume(::std::string&& value) {
  
  volume_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.AggrTrade.volume)
}
#endif
inline void AggrTrade::set_volume(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  volume_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.AggrTrade.volume)
}
inline void AggrTrade::set_volume(const char* value, size_t size) {
  
  volume_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.AggrTrade.volume)
}
inline ::std::string* AggrTrade::mutable_volume() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.AggrTrade.volume)
  return volume_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AggrTrade::release_volume() {
  // @@protoc_insertion_point(field_release:HuobiProto.AggrTrade.volume)
  
  return volume_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AggrTrade::set_allocated_volume(::std::string* volume) {
  if (volume != NULL) {
    
  } else {
    
  }
  volume_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), volume);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.AggrTrade.volume)
}

// .HuobiProto.Side side = 6;
inline void AggrTrade::clear_side() {
  side_ = 0;
}
inline ::HuobiProto::Side AggrTrade::side() const {
  // @@protoc_insertion_point(field_get:HuobiProto.AggrTrade.side)
  return static_cast< ::HuobiProto::Side >(side_);
}
inline void AggrTrade::set_side(::HuobiProto::Side value) {
  
  side_ = value;
  // @@protoc_insertion_point(field_set:HuobiProto.AggrTrade.side)
}

// string symbol = 7;
inline void AggrTrade::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AggrTrade::symbol() const {
  // @@protoc_insertion_point(field_get:HuobiProto.AggrTrade.symbol)
  return symbol_.GetNoArena();
}
inline void AggrTrade::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.AggrTrade.symbol)
}
#if LANG_CXX11
inline void AggrTrade::set_symbol(::std::string&& value) {
  
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.AggrTrade.symbol)
}
#endif
inline void AggrTrade::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.AggrTrade.symbol)
}
inline void AggrTrade::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.AggrTrade.symbol)
}
inline ::std::string* AggrTrade::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.AggrTrade.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AggrTrade::release_symbol() {
  // @@protoc_insertion_point(field_release:HuobiProto.AggrTrade.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AggrTrade::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.AggrTrade.symbol)
}

// -------------------------------------------------------------------

// Trade

// int64 trade_id = 1;
inline void Trade::clear_trade_id() {
  trade_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Trade::trade_id() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Trade.trade_id)
  return trade_id_;
}
inline void Trade::set_trade_id(::google::protobuf::int64 value) {
  
  trade_id_ = value;
  // @@protoc_insertion_point(field_set:HuobiProto.Trade.trade_id)
}

// int64 ts = 2;
inline void Trade::clear_ts() {
  ts_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Trade::ts() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Trade.ts)
  return ts_;
}
inline void Trade::set_ts(::google::protobuf::int64 value) {
  
  ts_ = value;
  // @@protoc_insertion_point(field_set:HuobiProto.Trade.ts)
}

// string price = 3;
inline void Trade::clear_price() {
  price_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Trade::price() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Trade.price)
  return price_.GetNoArena();
}
inline void Trade::set_price(const ::std::string& value) {
  
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.Trade.price)
}
#if LANG_CXX11
inline void Trade::set_price(::std::string&& value) {
  
  price_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.Trade.price)
}
#endif
inline void Trade::set_price(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.Trade.price)
}
inline void Trade::set_price(const char* value, size_t size) {
  
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.Trade.price)
}
inline ::std::string* Trade::mutable_price() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.Trade.price)
  return price_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Trade::release_price() {
  // @@protoc_insertion_point(field_release:HuobiProto.Trade.price)
  
  return price_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Trade::set_allocated_price(::std::string* price) {
  if (price != NULL) {
    
  } else {
    
  }
  price_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), price);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.Trade.price)
}

// string volume = 4;
inline void Trade::clear_volume() {
  volume_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Trade::volume() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Trade.volume)
  return volume_.GetNoArena();
}
inline void Trade::set_volume(const ::std::string& value) {
  
  volume_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.Trade.volume)
}
#if LANG_CXX11
inline void Trade::set_volume(::std::string&& value) {
  
  volume_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.Trade.volume)
}
#endif
inline void Trade::set_volume(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  volume_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.Trade.volume)
}
inline void Trade::set_volume(const char* value, size_t size) {
  
  volume_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.Trade.volume)
}
inline ::std::string* Trade::mutable_volume() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.Trade.volume)
  return volume_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Trade::release_volume() {
  // @@protoc_insertion_point(field_release:HuobiProto.Trade.volume)
  
  return volume_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Trade::set_allocated_volume(::std::string* volume) {
  if (volume != NULL) {
    
  } else {
    
  }
  volume_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), volume);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.Trade.volume)
}

// .HuobiProto.Side side = 5;
inline void Trade::clear_side() {
  side_ = 0;
}
inline ::HuobiProto::Side Trade::side() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Trade.side)
  return static_cast< ::HuobiProto::Side >(side_);
}
inline void Trade::set_side(::HuobiProto::Side value) {
  
  side_ = value;
  // @@protoc_insertion_point(field_set:HuobiProto.Trade.side)
}

// string symbol = 6;
inline void Trade::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Trade::symbol() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Trade.symbol)
  return symbol_.GetNoArena();
}
inline void Trade::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.Trade.symbol)
}
#if LANG_CXX11
inline void Trade::set_symbol(::std::string&& value) {
  
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.Trade.symbol)
}
#endif
inline void Trade::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.Trade.symbol)
}
inline void Trade::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.Trade.symbol)
}
inline ::std::string* Trade::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.Trade.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Trade::release_symbol() {
  // @@protoc_insertion_point(field_release:HuobiProto.Trade.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Trade::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.Trade.symbol)
}

// -------------------------------------------------------------------

// ReqTrade_Tick

// int64 trade_id = 1;
inline void ReqTrade_Tick::clear_trade_id() {
  trade_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ReqTrade_Tick::trade_id() const {
  // @@protoc_insertion_point(field_get:HuobiProto.ReqTrade.Tick.trade_id)
  return trade_id_;
}
inline void ReqTrade_Tick::set_trade_id(::google::protobuf::int64 value) {
  
  trade_id_ = value;
  // @@protoc_insertion_point(field_set:HuobiProto.ReqTrade.Tick.trade_id)
}

// int64 ts = 2;
inline void ReqTrade_Tick::clear_ts() {
  ts_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ReqTrade_Tick::ts() const {
  // @@protoc_insertion_point(field_get:HuobiProto.ReqTrade.Tick.ts)
  return ts_;
}
inline void ReqTrade_Tick::set_ts(::google::protobuf::int64 value) {
  
  ts_ = value;
  // @@protoc_insertion_point(field_set:HuobiProto.ReqTrade.Tick.ts)
}

// string price = 3;
inline void ReqTrade_Tick::clear_price() {
  price_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqTrade_Tick::price() const {
  // @@protoc_insertion_point(field_get:HuobiProto.ReqTrade.Tick.price)
  return price_.GetNoArena();
}
inline void ReqTrade_Tick::set_price(const ::std::string& value) {
  
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.ReqTrade.Tick.price)
}
#if LANG_CXX11
inline void ReqTrade_Tick::set_price(::std::string&& value) {
  
  price_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.ReqTrade.Tick.price)
}
#endif
inline void ReqTrade_Tick::set_price(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.ReqTrade.Tick.price)
}
inline void ReqTrade_Tick::set_price(const char* value, size_t size) {
  
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.ReqTrade.Tick.price)
}
inline ::std::string* ReqTrade_Tick::mutable_price() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.ReqTrade.Tick.price)
  return price_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqTrade_Tick::release_price() {
  // @@protoc_insertion_point(field_release:HuobiProto.ReqTrade.Tick.price)
  
  return price_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqTrade_Tick::set_allocated_price(::std::string* price) {
  if (price != NULL) {
    
  } else {
    
  }
  price_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), price);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.ReqTrade.Tick.price)
}

// string volume = 4;
inline void ReqTrade_Tick::clear_volume() {
  volume_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqTrade_Tick::volume() const {
  // @@protoc_insertion_point(field_get:HuobiProto.ReqTrade.Tick.volume)
  return volume_.GetNoArena();
}
inline void ReqTrade_Tick::set_volume(const ::std::string& value) {
  
  volume_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.ReqTrade.Tick.volume)
}
#if LANG_CXX11
inline void ReqTrade_Tick::set_volume(::std::string&& value) {
  
  volume_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.ReqTrade.Tick.volume)
}
#endif
inline void ReqTrade_Tick::set_volume(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  volume_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.ReqTrade.Tick.volume)
}
inline void ReqTrade_Tick::set_volume(const char* value, size_t size) {
  
  volume_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.ReqTrade.Tick.volume)
}
inline ::std::string* ReqTrade_Tick::mutable_volume() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.ReqTrade.Tick.volume)
  return volume_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqTrade_Tick::release_volume() {
  // @@protoc_insertion_point(field_release:HuobiProto.ReqTrade.Tick.volume)
  
  return volume_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqTrade_Tick::set_allocated_volume(::std::string* volume) {
  if (volume != NULL) {
    
  } else {
    
  }
  volume_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), volume);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.ReqTrade.Tick.volume)
}

// .HuobiProto.Side side = 5;
inline void ReqTrade_Tick::clear_side() {
  side_ = 0;
}
inline ::HuobiProto::Side ReqTrade_Tick::side() const {
  // @@protoc_insertion_point(field_get:HuobiProto.ReqTrade.Tick.side)
  return static_cast< ::HuobiProto::Side >(side_);
}
inline void ReqTrade_Tick::set_side(::HuobiProto::Side value) {
  
  side_ = value;
  // @@protoc_insertion_point(field_set:HuobiProto.ReqTrade.Tick.side)
}

// -------------------------------------------------------------------

// ReqTrade

// string symbol = 1;
inline void ReqTrade::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqTrade::symbol() const {
  // @@protoc_insertion_point(field_get:HuobiProto.ReqTrade.symbol)
  return symbol_.GetNoArena();
}
inline void ReqTrade::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.ReqTrade.symbol)
}
#if LANG_CXX11
inline void ReqTrade::set_symbol(::std::string&& value) {
  
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.ReqTrade.symbol)
}
#endif
inline void ReqTrade::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.ReqTrade.symbol)
}
inline void ReqTrade::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.ReqTrade.symbol)
}
inline ::std::string* ReqTrade::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.ReqTrade.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqTrade::release_symbol() {
  // @@protoc_insertion_point(field_release:HuobiProto.ReqTrade.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqTrade::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.ReqTrade.symbol)
}

// repeated .HuobiProto.ReqTrade.Tick trades = 2;
inline int ReqTrade::trades_size() const {
  return trades_.size();
}
inline void ReqTrade::clear_trades() {
  trades_.Clear();
}
inline ::HuobiProto::ReqTrade_Tick* ReqTrade::mutable_trades(int index) {
  // @@protoc_insertion_point(field_mutable:HuobiProto.ReqTrade.trades)
  return trades_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::HuobiProto::ReqTrade_Tick >*
ReqTrade::mutable_trades() {
  // @@protoc_insertion_point(field_mutable_list:HuobiProto.ReqTrade.trades)
  return &trades_;
}
inline const ::HuobiProto::ReqTrade_Tick& ReqTrade::trades(int index) const {
  // @@protoc_insertion_point(field_get:HuobiProto.ReqTrade.trades)
  return trades_.Get(index);
}
inline ::HuobiProto::ReqTrade_Tick* ReqTrade::add_trades() {
  // @@protoc_insertion_point(field_add:HuobiProto.ReqTrade.trades)
  return trades_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HuobiProto::ReqTrade_Tick >&
ReqTrade::trades() const {
  // @@protoc_insertion_point(field_list:HuobiProto.ReqTrade.trades)
  return trades_;
}

// -------------------------------------------------------------------

// MarketSummary

// string symbol = 1;
inline void MarketSummary::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MarketSummary::symbol() const {
  // @@protoc_insertion_point(field_get:HuobiProto.MarketSummary.symbol)
  return symbol_.GetNoArena();
}
inline void MarketSummary::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.MarketSummary.symbol)
}
#if LANG_CXX11
inline void MarketSummary::set_symbol(::std::string&& value) {
  
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.MarketSummary.symbol)
}
#endif
inline void MarketSummary::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.MarketSummary.symbol)
}
inline void MarketSummary::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.MarketSummary.symbol)
}
inline ::std::string* MarketSummary::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.MarketSummary.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketSummary::release_symbol() {
  // @@protoc_insertion_point(field_release:HuobiProto.MarketSummary.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketSummary::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.MarketSummary.symbol)
}

// int64 ts = 2;
inline void MarketSummary::clear_ts() {
  ts_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MarketSummary::ts() const {
  // @@protoc_insertion_point(field_get:HuobiProto.MarketSummary.ts)
  return ts_;
}
inline void MarketSummary::set_ts(::google::protobuf::int64 value) {
  
  ts_ = value;
  // @@protoc_insertion_point(field_set:HuobiProto.MarketSummary.ts)
}

// int64 id = 3;
inline void MarketSummary::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MarketSummary::id() const {
  // @@protoc_insertion_point(field_get:HuobiProto.MarketSummary.id)
  return id_;
}
inline void MarketSummary::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:HuobiProto.MarketSummary.id)
}

// string open = 4;
inline void MarketSummary::clear_open() {
  open_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MarketSummary::open() const {
  // @@protoc_insertion_point(field_get:HuobiProto.MarketSummary.open)
  return open_.GetNoArena();
}
inline void MarketSummary::set_open(const ::std::string& value) {
  
  open_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.MarketSummary.open)
}
#if LANG_CXX11
inline void MarketSummary::set_open(::std::string&& value) {
  
  open_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.MarketSummary.open)
}
#endif
inline void MarketSummary::set_open(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  open_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.MarketSummary.open)
}
inline void MarketSummary::set_open(const char* value, size_t size) {
  
  open_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.MarketSummary.open)
}
inline ::std::string* MarketSummary::mutable_open() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.MarketSummary.open)
  return open_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketSummary::release_open() {
  // @@protoc_insertion_point(field_release:HuobiProto.MarketSummary.open)
  
  return open_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketSummary::set_allocated_open(::std::string* open) {
  if (open != NULL) {
    
  } else {
    
  }
  open_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), open);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.MarketSummary.open)
}

// string close = 5;
inline void MarketSummary::clear_close() {
  close_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MarketSummary::close() const {
  // @@protoc_insertion_point(field_get:HuobiProto.MarketSummary.close)
  return close_.GetNoArena();
}
inline void MarketSummary::set_close(const ::std::string& value) {
  
  close_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.MarketSummary.close)
}
#if LANG_CXX11
inline void MarketSummary::set_close(::std::string&& value) {
  
  close_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.MarketSummary.close)
}
#endif
inline void MarketSummary::set_close(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  close_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.MarketSummary.close)
}
inline void MarketSummary::set_close(const char* value, size_t size) {
  
  close_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.MarketSummary.close)
}
inline ::std::string* MarketSummary::mutable_close() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.MarketSummary.close)
  return close_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketSummary::release_close() {
  // @@protoc_insertion_point(field_release:HuobiProto.MarketSummary.close)
  
  return close_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketSummary::set_allocated_close(::std::string* close) {
  if (close != NULL) {
    
  } else {
    
  }
  close_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), close);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.MarketSummary.close)
}

// string low = 6;
inline void MarketSummary::clear_low() {
  low_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MarketSummary::low() const {
  // @@protoc_insertion_point(field_get:HuobiProto.MarketSummary.low)
  return low_.GetNoArena();
}
inline void MarketSummary::set_low(const ::std::string& value) {
  
  low_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.MarketSummary.low)
}
#if LANG_CXX11
inline void MarketSummary::set_low(::std::string&& value) {
  
  low_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.MarketSummary.low)
}
#endif
inline void MarketSummary::set_low(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  low_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.MarketSummary.low)
}
inline void MarketSummary::set_low(const char* value, size_t size) {
  
  low_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.MarketSummary.low)
}
inline ::std::string* MarketSummary::mutable_low() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.MarketSummary.low)
  return low_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketSummary::release_low() {
  // @@protoc_insertion_point(field_release:HuobiProto.MarketSummary.low)
  
  return low_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketSummary::set_allocated_low(::std::string* low) {
  if (low != NULL) {
    
  } else {
    
  }
  low_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), low);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.MarketSummary.low)
}

// string high = 7;
inline void MarketSummary::clear_high() {
  high_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MarketSummary::high() const {
  // @@protoc_insertion_point(field_get:HuobiProto.MarketSummary.high)
  return high_.GetNoArena();
}
inline void MarketSummary::set_high(const ::std::string& value) {
  
  high_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.MarketSummary.high)
}
#if LANG_CXX11
inline void MarketSummary::set_high(::std::string&& value) {
  
  high_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.MarketSummary.high)
}
#endif
inline void MarketSummary::set_high(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  high_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.MarketSummary.high)
}
inline void MarketSummary::set_high(const char* value, size_t size) {
  
  high_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.MarketSummary.high)
}
inline ::std::string* MarketSummary::mutable_high() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.MarketSummary.high)
  return high_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketSummary::release_high() {
  // @@protoc_insertion_point(field_release:HuobiProto.MarketSummary.high)
  
  return high_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketSummary::set_allocated_high(::std::string* high) {
  if (high != NULL) {
    
  } else {
    
  }
  high_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), high);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.MarketSummary.high)
}

// string turnover = 8;
inline void MarketSummary::clear_turnover() {
  turnover_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MarketSummary::turnover() const {
  // @@protoc_insertion_point(field_get:HuobiProto.MarketSummary.turnover)
  return turnover_.GetNoArena();
}
inline void MarketSummary::set_turnover(const ::std::string& value) {
  
  turnover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.MarketSummary.turnover)
}
#if LANG_CXX11
inline void MarketSummary::set_turnover(::std::string&& value) {
  
  turnover_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.MarketSummary.turnover)
}
#endif
inline void MarketSummary::set_turnover(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  turnover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.MarketSummary.turnover)
}
inline void MarketSummary::set_turnover(const char* value, size_t size) {
  
  turnover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.MarketSummary.turnover)
}
inline ::std::string* MarketSummary::mutable_turnover() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.MarketSummary.turnover)
  return turnover_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketSummary::release_turnover() {
  // @@protoc_insertion_point(field_release:HuobiProto.MarketSummary.turnover)
  
  return turnover_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketSummary::set_allocated_turnover(::std::string* turnover) {
  if (turnover != NULL) {
    
  } else {
    
  }
  turnover_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), turnover);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.MarketSummary.turnover)
}

// string volume = 9;
inline void MarketSummary::clear_volume() {
  volume_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MarketSummary::volume() const {
  // @@protoc_insertion_point(field_get:HuobiProto.MarketSummary.volume)
  return volume_.GetNoArena();
}
inline void MarketSummary::set_volume(const ::std::string& value) {
  
  volume_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.MarketSummary.volume)
}
#if LANG_CXX11
inline void MarketSummary::set_volume(::std::string&& value) {
  
  volume_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.MarketSummary.volume)
}
#endif
inline void MarketSummary::set_volume(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  volume_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.MarketSummary.volume)
}
inline void MarketSummary::set_volume(const char* value, size_t size) {
  
  volume_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.MarketSummary.volume)
}
inline ::std::string* MarketSummary::mutable_volume() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.MarketSummary.volume)
  return volume_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketSummary::release_volume() {
  // @@protoc_insertion_point(field_release:HuobiProto.MarketSummary.volume)
  
  return volume_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketSummary::set_allocated_volume(::std::string* volume) {
  if (volume != NULL) {
    
  } else {
    
  }
  volume_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), volume);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.MarketSummary.volume)
}

// int32 num_of_trades = 10;
inline void MarketSummary::clear_num_of_trades() {
  num_of_trades_ = 0;
}
inline ::google::protobuf::int32 MarketSummary::num_of_trades() const {
  // @@protoc_insertion_point(field_get:HuobiProto.MarketSummary.num_of_trades)
  return num_of_trades_;
}
inline void MarketSummary::set_num_of_trades(::google::protobuf::int32 value) {
  
  num_of_trades_ = value;
  // @@protoc_insertion_point(field_set:HuobiProto.MarketSummary.num_of_trades)
}

// -------------------------------------------------------------------

// Overview_Tick

// string symbol = 1;
inline void Overview_Tick::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Overview_Tick::symbol() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Overview.Tick.symbol)
  return symbol_.GetNoArena();
}
inline void Overview_Tick::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.Overview.Tick.symbol)
}
#if LANG_CXX11
inline void Overview_Tick::set_symbol(::std::string&& value) {
  
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.Overview.Tick.symbol)
}
#endif
inline void Overview_Tick::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.Overview.Tick.symbol)
}
inline void Overview_Tick::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.Overview.Tick.symbol)
}
inline ::std::string* Overview_Tick::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.Overview.Tick.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Overview_Tick::release_symbol() {
  // @@protoc_insertion_point(field_release:HuobiProto.Overview.Tick.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Overview_Tick::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.Overview.Tick.symbol)
}

// string open = 2;
inline void Overview_Tick::clear_open() {
  open_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Overview_Tick::open() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Overview.Tick.open)
  return open_.GetNoArena();
}
inline void Overview_Tick::set_open(const ::std::string& value) {
  
  open_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.Overview.Tick.open)
}
#if LANG_CXX11
inline void Overview_Tick::set_open(::std::string&& value) {
  
  open_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.Overview.Tick.open)
}
#endif
inline void Overview_Tick::set_open(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  open_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.Overview.Tick.open)
}
inline void Overview_Tick::set_open(const char* value, size_t size) {
  
  open_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.Overview.Tick.open)
}
inline ::std::string* Overview_Tick::mutable_open() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.Overview.Tick.open)
  return open_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Overview_Tick::release_open() {
  // @@protoc_insertion_point(field_release:HuobiProto.Overview.Tick.open)
  
  return open_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Overview_Tick::set_allocated_open(::std::string* open) {
  if (open != NULL) {
    
  } else {
    
  }
  open_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), open);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.Overview.Tick.open)
}

// string close = 3;
inline void Overview_Tick::clear_close() {
  close_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Overview_Tick::close() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Overview.Tick.close)
  return close_.GetNoArena();
}
inline void Overview_Tick::set_close(const ::std::string& value) {
  
  close_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.Overview.Tick.close)
}
#if LANG_CXX11
inline void Overview_Tick::set_close(::std::string&& value) {
  
  close_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.Overview.Tick.close)
}
#endif
inline void Overview_Tick::set_close(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  close_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.Overview.Tick.close)
}
inline void Overview_Tick::set_close(const char* value, size_t size) {
  
  close_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.Overview.Tick.close)
}
inline ::std::string* Overview_Tick::mutable_close() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.Overview.Tick.close)
  return close_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Overview_Tick::release_close() {
  // @@protoc_insertion_point(field_release:HuobiProto.Overview.Tick.close)
  
  return close_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Overview_Tick::set_allocated_close(::std::string* close) {
  if (close != NULL) {
    
  } else {
    
  }
  close_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), close);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.Overview.Tick.close)
}

// string low = 4;
inline void Overview_Tick::clear_low() {
  low_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Overview_Tick::low() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Overview.Tick.low)
  return low_.GetNoArena();
}
inline void Overview_Tick::set_low(const ::std::string& value) {
  
  low_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.Overview.Tick.low)
}
#if LANG_CXX11
inline void Overview_Tick::set_low(::std::string&& value) {
  
  low_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.Overview.Tick.low)
}
#endif
inline void Overview_Tick::set_low(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  low_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.Overview.Tick.low)
}
inline void Overview_Tick::set_low(const char* value, size_t size) {
  
  low_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.Overview.Tick.low)
}
inline ::std::string* Overview_Tick::mutable_low() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.Overview.Tick.low)
  return low_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Overview_Tick::release_low() {
  // @@protoc_insertion_point(field_release:HuobiProto.Overview.Tick.low)
  
  return low_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Overview_Tick::set_allocated_low(::std::string* low) {
  if (low != NULL) {
    
  } else {
    
  }
  low_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), low);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.Overview.Tick.low)
}

// string high = 5;
inline void Overview_Tick::clear_high() {
  high_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Overview_Tick::high() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Overview.Tick.high)
  return high_.GetNoArena();
}
inline void Overview_Tick::set_high(const ::std::string& value) {
  
  high_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.Overview.Tick.high)
}
#if LANG_CXX11
inline void Overview_Tick::set_high(::std::string&& value) {
  
  high_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.Overview.Tick.high)
}
#endif
inline void Overview_Tick::set_high(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  high_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.Overview.Tick.high)
}
inline void Overview_Tick::set_high(const char* value, size_t size) {
  
  high_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.Overview.Tick.high)
}
inline ::std::string* Overview_Tick::mutable_high() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.Overview.Tick.high)
  return high_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Overview_Tick::release_high() {
  // @@protoc_insertion_point(field_release:HuobiProto.Overview.Tick.high)
  
  return high_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Overview_Tick::set_allocated_high(::std::string* high) {
  if (high != NULL) {
    
  } else {
    
  }
  high_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), high);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.Overview.Tick.high)
}

// string turnover = 6;
inline void Overview_Tick::clear_turnover() {
  turnover_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Overview_Tick::turnover() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Overview.Tick.turnover)
  return turnover_.GetNoArena();
}
inline void Overview_Tick::set_turnover(const ::std::string& value) {
  
  turnover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.Overview.Tick.turnover)
}
#if LANG_CXX11
inline void Overview_Tick::set_turnover(::std::string&& value) {
  
  turnover_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.Overview.Tick.turnover)
}
#endif
inline void Overview_Tick::set_turnover(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  turnover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.Overview.Tick.turnover)
}
inline void Overview_Tick::set_turnover(const char* value, size_t size) {
  
  turnover_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.Overview.Tick.turnover)
}
inline ::std::string* Overview_Tick::mutable_turnover() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.Overview.Tick.turnover)
  return turnover_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Overview_Tick::release_turnover() {
  // @@protoc_insertion_point(field_release:HuobiProto.Overview.Tick.turnover)
  
  return turnover_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Overview_Tick::set_allocated_turnover(::std::string* turnover) {
  if (turnover != NULL) {
    
  } else {
    
  }
  turnover_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), turnover);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.Overview.Tick.turnover)
}

// string volume = 7;
inline void Overview_Tick::clear_volume() {
  volume_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Overview_Tick::volume() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Overview.Tick.volume)
  return volume_.GetNoArena();
}
inline void Overview_Tick::set_volume(const ::std::string& value) {
  
  volume_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.Overview.Tick.volume)
}
#if LANG_CXX11
inline void Overview_Tick::set_volume(::std::string&& value) {
  
  volume_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.Overview.Tick.volume)
}
#endif
inline void Overview_Tick::set_volume(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  volume_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.Overview.Tick.volume)
}
inline void Overview_Tick::set_volume(const char* value, size_t size) {
  
  volume_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.Overview.Tick.volume)
}
inline ::std::string* Overview_Tick::mutable_volume() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.Overview.Tick.volume)
  return volume_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Overview_Tick::release_volume() {
  // @@protoc_insertion_point(field_release:HuobiProto.Overview.Tick.volume)
  
  return volume_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Overview_Tick::set_allocated_volume(::std::string* volume) {
  if (volume != NULL) {
    
  } else {
    
  }
  volume_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), volume);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.Overview.Tick.volume)
}

// int32 num_of_trades = 8;
inline void Overview_Tick::clear_num_of_trades() {
  num_of_trades_ = 0;
}
inline ::google::protobuf::int32 Overview_Tick::num_of_trades() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Overview.Tick.num_of_trades)
  return num_of_trades_;
}
inline void Overview_Tick::set_num_of_trades(::google::protobuf::int32 value) {
  
  num_of_trades_ = value;
  // @@protoc_insertion_point(field_set:HuobiProto.Overview.Tick.num_of_trades)
}

// -------------------------------------------------------------------

// Overview

// int64 ts = 1;
inline void Overview::clear_ts() {
  ts_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Overview::ts() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Overview.ts)
  return ts_;
}
inline void Overview::set_ts(::google::protobuf::int64 value) {
  
  ts_ = value;
  // @@protoc_insertion_point(field_set:HuobiProto.Overview.ts)
}

// repeated .HuobiProto.Overview.Tick tick = 2;
inline int Overview::tick_size() const {
  return tick_.size();
}
inline void Overview::clear_tick() {
  tick_.Clear();
}
inline ::HuobiProto::Overview_Tick* Overview::mutable_tick(int index) {
  // @@protoc_insertion_point(field_mutable:HuobiProto.Overview.tick)
  return tick_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::HuobiProto::Overview_Tick >*
Overview::mutable_tick() {
  // @@protoc_insertion_point(field_mutable_list:HuobiProto.Overview.tick)
  return &tick_;
}
inline const ::HuobiProto::Overview_Tick& Overview::tick(int index) const {
  // @@protoc_insertion_point(field_get:HuobiProto.Overview.tick)
  return tick_.Get(index);
}
inline ::HuobiProto::Overview_Tick* Overview::add_tick() {
  // @@protoc_insertion_point(field_add:HuobiProto.Overview.tick)
  return tick_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HuobiProto::Overview_Tick >&
Overview::tick() const {
  // @@protoc_insertion_point(field_list:HuobiProto.Overview.tick)
  return tick_;
}

// -------------------------------------------------------------------

// Ping

// int64 ts = 1;
inline void Ping::clear_ts() {
  ts_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Ping::ts() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Ping.ts)
  return ts_;
}
inline void Ping::set_ts(::google::protobuf::int64 value) {
  
  ts_ = value;
  // @@protoc_insertion_point(field_set:HuobiProto.Ping.ts)
}

// -------------------------------------------------------------------

// Result

// int32 code = 1;
inline void Result::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 Result::code() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Result.code)
  return code_;
}
inline void Result::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:HuobiProto.Result.code)
}

// int64 sequence = 2;
inline void Result::clear_sequence() {
  sequence_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Result::sequence() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Result.sequence)
  return sequence_;
}
inline void Result::set_sequence(::google::protobuf::int64 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:HuobiProto.Result.sequence)
}

// .HuobiProto.Action action = 3;
inline void Result::clear_action() {
  action_ = 0;
}
inline ::HuobiProto::Action Result::action() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Result.action)
  return static_cast< ::HuobiProto::Action >(action_);
}
inline void Result::set_action(::HuobiProto::Action value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:HuobiProto.Result.action)
}

// string ch = 4;
inline void Result::clear_ch() {
  ch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Result::ch() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Result.ch)
  return ch_.GetNoArena();
}
inline void Result::set_ch(const ::std::string& value) {
  
  ch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.Result.ch)
}
#if LANG_CXX11
inline void Result::set_ch(::std::string&& value) {
  
  ch_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.Result.ch)
}
#endif
inline void Result::set_ch(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.Result.ch)
}
inline void Result::set_ch(const char* value, size_t size) {
  
  ch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.Result.ch)
}
inline ::std::string* Result::mutable_ch() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.Result.ch)
  return ch_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Result::release_ch() {
  // @@protoc_insertion_point(field_release:HuobiProto.Result.ch)
  
  return ch_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Result::set_allocated_ch(::std::string* ch) {
  if (ch != NULL) {
    
  } else {
    
  }
  ch_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ch);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.Result.ch)
}

// string message = 5;
inline void Result::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Result::message() const {
  // @@protoc_insertion_point(field_get:HuobiProto.Result.message)
  return message_.GetNoArena();
}
inline void Result::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HuobiProto.Result.message)
}
#if LANG_CXX11
inline void Result::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HuobiProto.Result.message)
}
#endif
inline void Result::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HuobiProto.Result.message)
}
inline void Result::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HuobiProto.Result.message)
}
inline ::std::string* Result::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:HuobiProto.Result.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Result::release_message() {
  // @@protoc_insertion_point(field_release:HuobiProto.Result.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Result::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.Result.message)
}

// .google.protobuf.Any data = 15;
inline bool Result::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
inline const ::google::protobuf::Any& Result::_internal_data() const {
  return *data_;
}
inline const ::google::protobuf::Any& Result::data() const {
  const ::google::protobuf::Any* p = data_;
  // @@protoc_insertion_point(field_get:HuobiProto.Result.data)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* Result::release_data() {
  // @@protoc_insertion_point(field_release:HuobiProto.Result.data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* Result::mutable_data() {
  
  if (data_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:HuobiProto.Result.data)
  return data_;
}
inline void Result::set_allocated_data(::google::protobuf::Any* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(data_);
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:HuobiProto.Result.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace HuobiProto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::HuobiProto::Depth_Step> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HuobiProto::Depth_Step>() {
  return ::HuobiProto::Depth_Step_descriptor();
}
template <> struct is_proto_enum< ::HuobiProto::Interval> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HuobiProto::Interval>() {
  return ::HuobiProto::Interval_descriptor();
}
template <> struct is_proto_enum< ::HuobiProto::Side> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HuobiProto::Side>() {
  return ::HuobiProto::Side_descriptor();
}
template <> struct is_proto_enum< ::HuobiProto::Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HuobiProto::Action>() {
  return ::HuobiProto::Action_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_huobi_5fmarket_5fdownstream_5fprotocol_2eproto
